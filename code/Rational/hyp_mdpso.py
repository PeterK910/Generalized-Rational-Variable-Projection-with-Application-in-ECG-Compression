"""
    Last Modified: July 01, 2024.
    Version 1.0.

    HYP_MDPSO  - Gives the pole configuration of the continuous MT system 
                that best fits the approximation of the function 'f'. This
                is a hyperbolic extension of the MD PSO algorithm [1].

    Usage: 
        [p,c,m,dbest,l,bl,prd]=hyp_mdpso_cr_vwin(f,ps_name,s,alpha,iterno,eps,show,insparts);

    Input parameters:
        f        : signal which is given as a ROW vector.  
        ps       : filename containing the hashtable which describes. 
                the spaces of the poles (see e.g., 'polespace1-3').
        s        : number of overall particles.
        alpha    : lies in [0,1] and controls the fitness function: alpha*PRD+(1-alpha)*CR.
        iterno   : number of iteration of the PSO algorithm.
        eps      : 2x2 matrix which contains the number of bits used for quantizing 
                the abs values and angles of the poles and coefficients:
                                | PolesAbsBit  PolesAngBit |
                                | CoeffAbsBit  CoeffAngBit |

        show     : optional logical value to display each step of the optimization process
        insparts : optional struct array to insert particles to the initial swarm:
                insparts(i).dim=inserted dimension number from [Dmin,Dmax] related to the 'ps' structure
                insparts(i).poles=inserted poles (length(poles)=ps{dim}) 

    Output parameters:
        p     : predicted poles of the continuous MT system with 'm' multiplicities
        c     : the Fourier coefficients of 'f' with respect to the continuous 
                MT system defined by the predicted poles 'p' 
        m     : multiplicites of the best pole configuration 'p'
        dbest : best dimension found by the optimization process
        l     : length of the approximated signal 
        bl:   : the signal 'f' is normalized by subtracting the base line, 
                so 'bl' contains the endpoints of the original signal which is
                neccessary for the reconstruction.
        prd   : approximation error in terms of PRD=(norm(sig-aprx)/norm(sig-mean(sig)))*100;


    The basic MDPSO algorithm was implemented by using the following article:
    [1] S. Kiranyaz,  J. Pulkkinen,  A. Yildirim,  and M. Gabbouj,  
        Multi-dimensional particle swarm optimization in dynamic environments, 
        Expert Systems with Applications, vol. 38, no. 3, pp. 2212-2223, 2011.

    [2] P. Kovács, S. Kiranyaz, M. Gabbouj, "Hyperbolic particle swarm optimization 
        with application in rational identification", Proceedings of the 21st European
        Signal Processing Conference (EUSIPCO), pp. 1-5, 2013. 

    Note: the same terminology and notations of paper [1] were used in this
        implementation. Additionally, the original MDPSO algorithm was 
        modified by using [2] to adapt the method to pole optimization.


    Copyright (c) 2017, Péter Kovács <kovika@inf.elte.hu>  
    Eötvös Loránd University, Budapest, Hungary, 2017.   

    Permission to use, copy, modify, and/or distribute this software for  
    any purpose with or without fee is hereby granted, provided that the  
    above copyright notice and this permission notice appear in all copies.  

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL  
    WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED  
    WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR  
    BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES  
    OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,  
    WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  
    ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS  
    SOFTWARE.  

"""
from Rational.norm_sig import norm_sig
from Rational.rait.addimag import addimag
from Rational.rait.mt_coeffs import mt_coeffs
from Rational.rait.mt_system import mt_system
from Rational.rait.mt_generate import mt_generate
from Rational.rait.multiply_poles import multiply_poles
from Rational.rait.periodize_poles import periodize_poles
from Rational.Hyperbolic_operators.scale import scale
from Rational.Hyperbolic_operators.rho import rho
import numpy as np
import scipy.io as sio
import matplotlib.pyplot as plt


def hyp_mdpso(f, ps_name, s, alpha = 0.5, iterno = 50, eps = None, show = False, insparts = []):
    
    if eps is None:
        eps = 8 * np.ones((2, 2))

    # Loading polespace
    if isinstance(ps_name, list):
        Dmin = 1
        Dmax = len(ps_name)
        ps = ps_name
    else:
        data = sio.loadmat(ps_name)
        ps = data['ps']
        ps=ps[0]
        Dmin = data['Dmin']
        Dmin = Dmin[0][0]
        Dmax = data['Dmax']
        Dmax = Dmax[0][0]

    # Initializing the swarm
    #print(f )
    hf = addimag(f) # Computing the Hilbert-transform of 'f'.
    #print(hf )
    #exit(0)
    """ asdsasdasdas
    xd = np.random.randint(1, Dmax+1, s) # Initializing the particle's dimesions.
    vd = np.random.randint(1, Dmax+1, s) # Initializing the particles's dimension velocities.
    """
    xd=np.array([25,28,4,28,19,3,9,17,29,29,5,30,29,15,25,5,13,28,24,29,20,2,26,29,21,23,23,12,20,6])
    vd=np.array([22,1,9,2,3,25,21,10,29,2,14,12,23,24,6,15,14,20,22,23,9,21,20,5,4,15,29,11,18,7])
    """
    """

    xd_ = xd.copy() # Initializing the personal best dimensions of the particles.
    gbest = np.ones(Dmax, dtype=int) # Initializing the gbest particle at each dimenions.
    #print(gbest)
    # Sorting user defined inserted particles
    if insparts:
        if len(insparts) > s:
            raise ValueError('Inserted particles must be smaller than swarm size.')
        else:
            insparts = convert2ps(insparts, Dmax)
    else:
        insparts = [None] * Dmax
    #print(insparts)
    # Initializing the compression ratio for each dimension
    cr = np.ones(len(ps))
    for i in range(len(cr)):
        cn = np.sum(ps[i]) # number of complex coefficients
        pn = len(ps[i])
        cr[i] = (2 * (cn + pn) / len(f)) * 100
    #print(ps)
    # Step 1: Initializing positions and velocities
    xx = [None] * Dmax # Positions of the particles.
    vx = [None] * Dmax # Velocities of the particles.
    xy = [None] * Dmax # Personal best positions of the particles.
    xy_g = [None] * Dmax # Global best position in each dimension.
    pbesterr_a = [None] * Dmax # Personal best errors of the particles.
    gbesterr_d = [None] * Dmax # Global best errors in each dimension.

    #print(Dmin, Dmax)
    for d in range(Dmin-1, Dmax):
        ##print("ps:",ps)
        dim = 2 * len(ps[d][0]) # The poles are complex numbers, so the total dimension of the problem is 2*num_poles.
        xx[d] = np.zeros((dim, s))
        vx[d] = np.zeros((dim, s))

        # Initilaizing positions
        """ BEHOLD MY WILL TO DOMINATE ALL VARIABLES
        r = np.random.rand(dim//2, s)
        phi = 2 * np.pi * np.random.rand(dim//2, s)
        init_pole = r * np.exp(1j * phi)
        init_vel = r * np.exp(1j * phi)
        """
        match d:
            case 0:
                init_pole=np.array([[0.5888+0.4666j,0.50574+0.01473j,0.36562-0.81242j,0.472+0.27688j,-0.0092529+0.14901j,-0.76385+0.35119j,0.33813+0.74076j,0.56706+0.73619j,0.13394-0.14391j,-0.58606-0.18985j,0.21208-0.28051j,-0.34684+0.47142j,-0.7481+0.53065j,0.047943+0.75568j,0.15349+0.34811j,-0.065834+0.037679j,0.43469-0.30462j,-0.93247+0.053585j,-0.29788+0.48459j,-0.0081064+0.0087147j,0.030642-0.15926j,0.01624+0.31079j,0.13615+0.094357j,0.24573-0.093648j,-0.61368-0.3137j,0.04302+0.44848j,0.099045-0.20645j,0.14684+0.040692j,-0.31885-0.43376j,-0.046841-0.062588j],[0.24782-0.060488j,0.10897-0.69053j,0.65092-0.70466j,-0.11204+0.081634j,0.07968-0.24487j,0.21525-0.13538j,-0.021094+0.24261j,0.22968+0.26407j,-0.22025-0.12055j,0.29019+0.37389j,-0.59825-0.57651j,-0.54782-0.045711j,0.25389+0.13131j,0.53857+0.52731j,0.035823+0.56669j,0.051346+0.01656j,0.73275-0.26491j,-0.12961+0.0087656j,0.37984-0.27577j,0.25813+0.21685j,-0.61118+0.5073j,-0.4351+0.30006j,0.40661+0.4439j,0.62939-0.178j,0.69599+0.27445j,-0.050605+0.066822j,0.90906+0.088257j,0.40242+0.72113j,-0.11415-0.98957j,-0.4218+0.13435j]])
                init_vel=np.array([[0.46993+0.27997j,0.23463-0.70676j,0.61929-0.29688j,-0.36754+0.026351j,0.062274+0.77774j,0.9045-0.21362j,-0.48251-0.064456j,-0.4457+0.031141j,-0.21901-0.45893j,-0.55003+0.60496j,0.62629+0.15135j,0.69407-0.42062j,0.2854+0.20385j,-0.44758+0.75296j,0.40707+0.47092j,0.16273+0.12914j,-0.47061+0.017235j,-0.18399-0.82402j,0.17491-0.143j,-0.072056-0.21596j,0.30539+0.059333j,-0.43021-6.0645e-05j,0.74752-0.50992j,-0.32429-0.2957j,0.088163-0.24254j,0.24337+0.54284j,0.45597-0.39435j,-0.2213+0.014061j,0.29402-0.039622j,-0.42416-0.0012569j],[-0.023216+0.29541j,0.18578+0.034497j,-0.022622-0.18211j,-0.551-0.2963j,-0.078429+0.020743j,-0.74241-0.22485j,0.050293+0.43295j,-0.2179-0.21534j,-0.4046+0.31175j,0.79257-0.059962j,0.28426-0.25008j,0.15246-0.51055j,-0.069974+0.93639j,-0.2351-0.4974j,-0.10555-0.57748j,-0.17127-0.24783j,0.041839-0.22666j,0.1602-0.11077j,-0.086124+0.14739j,0.14033+0.41248j,-0.034372-0.92274j,-0.18335+0.023253j,-0.75543-0.62388j,0.07053-0.085867j,-0.36214-0.18948j,0.016576+0.26169j,0.6997+0.12744j,0.057902+0.10215j,-0.074039-0.31006j,-0.4995+0.09175j]])
            case 1:
                init_pole=np.array([[-0.015545+0.057557j,-0.62005+0.28395j,0.04223+0.0041224j,0.071088-0.0071419j,0.2594+0.45258j,0.075976+0.059869j,-0.56903+0.58786j,0.26181+0.77449j,-0.72092+0.046777j,-0.079899+0.12679j,0.62938-0.19739j,0.45497-0.24889j,0.92017+0.31619j,-0.049463-0.6471j,-0.095913+0.79456j,-0.4015+0.2115j,-0.41298-0.1281j,0.77247-0.29058j,-0.072568+0.041245j,0.13242-0.014154j,-0.055085+0.16441j,-0.11824-0.37263j,-0.41717-0.71914j,-0.77921-0.19551j,-0.01937-0.057285j,-0.19993-0.34559j,0.22991+0.47407j,0.28909+0.30025j,0.65685-0.0037953j,0.29864+0.55241j]])
                init_vel=np.array([[0.027113-0.018102j,0.40826-0.38506j,0.36422-0.80314j,-0.045072+0.66766j,-0.15794-0.1064j,0.36523+0.05201j,-0.41085+0.2085j,-0.3769+0.9064j,0.08257+0.13283j,0.37025+0.77125j,-0.57055+0.30032j,0.31223+0.20999j,-0.15549-0.11078j,-0.42113+0.077802j,-0.16057-0.45449j,-0.037352-0.11468j,-0.37994-0.45074j,0.22116+0.047403j,0.34923+0.16115j,-0.2469+0.52812j,-0.24709-0.048526j,-0.16409-0.23965j,-0.51602+0.33841j,0.11292-0.24005j,-0.16281-0.80814j,0.96366-0.19232j,-0.71614-0.14284j,-0.1564+0.30625j,0.46009+0.3598j,-0.082622-0.069193j]])
            case 2:
                init_pole=np.array([[-0.46715-0.62314j,-0.059725-0.068424j,0.039208+0.14857j,0.038027+0.43844j,-0.35734-0.28556j,-0.50073+0.13285j,0.081061-0.63254j,-0.1264-0.20485j,0.15784-0.24217j,-0.028125+0.69457j,-0.22152-0.12589j,0.45698-0.487j,-0.14288+0.31343j,0.62764-0.24928j,-0.59716+0.077486j,-0.88008-0.25398j,-0.44498-0.12591j,-0.45632-0.06493j,0.063057+0.31625j,0.36376+0.29976j,-0.1452+0.09924j,-0.31494+0.35356j,-0.23678-0.24556j,0.17493-0.078517j,0.086514+0.22692j,-0.089124-0.25387j,-0.18626-0.029987j,0.058579-0.069786j,-0.53588+0.42406j,-0.023373-0.42509j],[-0.18266-0.38203j,0.25082-0.08999j,-0.071111-0.27186j,0.38564+0.35939j,-0.83276+0.26978j,-0.49585-0.80285j,-0.56398+0.77402j,-0.58446+0.33993j,0.33438-0.58268j,-0.051435-0.044469j,-0.21674-0.056724j,-0.078297+0.84075j,0.5716+0.53149j,-0.0040974-0.0053204j,-0.24781-0.29695j,-0.00069221-0.00091966j,-0.076772-0.41735j,0.76956-0.030456j,0.61765+0.48408j,0.032946+0.013912j,-0.68412+0.23004j,0.012943-0.15217j,0.083618-0.60161j,0.72762-0.12586j,0.58977+0.70273j,0.6363+0.42557j,-0.28229-0.054482j,-0.5736+0.054755j,-0.25901-0.48133j,-0.63933-0.080981j]])
                init_vel=np.array([[0.20564-0.28039j,0.5297-0.25085j,-0.038574-0.022096j,0.17595-0.16729j,0.68779+0.0022575j,-0.55972-0.47845j,-0.67311-0.11826j,0.14024-0.41949j,-0.33083+0.0039616j,-0.24107-0.12219j,-0.058601-0.81963j,0.018214+0.88758j,0.66571+0.38518j,-0.42916-0.68521j,0.29192-0.23918j,0.094279-0.78476j,0.2949-0.1426j,0.43615+0.046718j,0.5001-0.58398j,0.48386-0.71337j,-0.48691-0.16599j,0.57619+0.1174j,-0.12972+0.15205j,-0.7471+0.04903j,0.56527+0.55182j,0.3233+0.42509j,0.10772+0.029579j,-0.13498+0.66509j,-0.064079-0.17856j,-0.14389-0.032924j],[-0.13927-0.055708j,-0.08621-0.24756j,0.30155-0.69209j,0.44133-0.030797j,0.2383-0.26881j,0.39392-0.024907j,-0.69823+0.090332j,0.0027167+0.019388j,0.3446-0.24756j,0.11094-0.16286j,-0.36869-0.22114j,-0.19612-0.33847j,-0.27888-0.28226j,-0.095804-0.74897j,0.21468-0.02397j,-0.82769-0.46487j,-0.58805-0.32372j,0.60451+0.57384j,-0.16644+0.016476j,0.24975+0.95785j,-0.6058-0.64417j,-0.11627-0.10213j,0.3874+0.12462j,0.29177+0.77231j,0.087915+0.30615j,0.0336+0.08344j,-0.090005-0.10235j,-0.48069-0.11891j,-0.495+0.0027494j,-0.051746+0.018562j]])
            case 3:
                init_pole=np.array([[0.054091+0.11151j,0.79943+0.29752j,-0.13883+0.23192j,0.14412+0.54629j,-0.18841-0.37204j,0.8071-0.49716j,-0.0029579-0.10567j,-0.15404-0.063084j,-0.46998-0.32903j,0.61965+0.6951j,0.58284-0.45244j,0.040605+0.85948j,-0.91914+0.35246j,0.62728-0.47288j,0.14791+0.098318j,-0.12886+0.03651j,0.93875-0.0272j,-0.086627+0.28255j,-0.13942+0.44577j,-0.025214-0.00086027j,-0.37994-0.41008j,0.30394+0.16924j,0.044886-0.030449j,0.51294+0.41977j,-0.47233+0.76432j,-0.022893-0.98815j,0.67442+0.21188j,-0.22913-0.17423j,-0.059102-0.46107j,0.16026-0.80235j],[-0.3117+0.37854j,-0.86568-0.1198j,0.093858+0.18614j,0.52994-0.3594j,-0.20195+0.040541j,0.06516+0.049898j,-0.012241-0.14151j,0.24949+0.56863j,-0.016073+0.049535j,0.16965+0.70864j,0.057121+0.027519j,0.88161+0.30963j,0.85595+0.071605j,0.16886+0.48481j,-0.14058+0.37298j,0.024798+0.018418j,-0.14861+0.26211j,0.30796+0.12653j,0.6209+0.18612j,0.060411-0.84004j,0.72145+0.45716j,0.075969-0.43951j,-0.17314-0.0373j,0.15169-0.294j,-0.032231+0.11367j,0.53884+0.035046j,-0.49294-0.86948j,-0.40896-0.06768j,-0.20273-0.73657j,-0.023688+0.097382j]])
                init_vel=np.array([[0.52722+0.44905j,-0.1024+0.38307j,0.76076-0.17295j,-0.2068-0.57161j,-0.095566+0.043047j,0.42397+0.34964j,0.34097+0.82261j,0.21738-0.70143j,0.0086615-0.072369j,-0.11467+0.79007j,-0.31691-0.60583j,-0.68975+0.21581j,0.1094+0.042842j,0.046785-0.32547j,0.52861+0.53082j,0.6189+0.40572j,-0.65084+0.34142j,-0.14678-0.85441j,0.28407+0.23147j,0.4798+0.48893j,0.64268+0.45832j,0.10123+0.17944j,-0.31757+0.70358j,0.078585+0.38024j,0.17906-0.14268j,-0.45507-0.16622j,0.18478+0.75979j,0.25198-0.1516j,-0.49626-0.18855j,0.20368+0.35042j],[0.11948-0.5437j,-0.049012-0.037299j,-0.30766+0.13895j,0.037706-0.74029j,-0.071553-0.106j,0.44381-0.19617j,-0.081078+0.79484j,-0.051176+0.0039941j,-0.070292+0.053816j,0.91732+0.21861j,-0.11936+0.056565j,-0.085092-0.070266j,-0.25745+0.58672j,-0.21592-0.61713j,0.39881+0.4255j,0.23454+0.011534j,-0.54266-0.80472j,-0.084582-0.016802j,-0.24973-0.27192j,0.39739+0.44679j,0.23072+0.28624j,0.028716+0.081771j,-0.083375+0.18802j,-0.003612+0.55177j,-0.18597-0.61441j,0.060801+0.13914j,0.088958+0.046991j,-0.063765-0.22865j,-0.035508+0.084328j,-0.075294-0.072963j]])
            case 4:
                init_pole=np.array([[-0.40614+0.90059j,0.23778-0.31767j,0.38339-0.12219j,0.41555-0.46103j,0.16111-0.0030338j,-0.27718-0.21498j,0.52403+0.083453j,-0.05084-0.33143j,-0.041811-0.42057j,0.71608-0.19646j,0.020487+0.12318j,-0.20222-0.2448j,-0.15698-0.92247j,-0.5694+0.50924j,0.62934-0.39624j,0.17893-0.42731j,-0.73264-0.37617j,0.0057371+0.66596j,0.23574-0.66198j,-0.52736-0.12019j,0.80732-0.055149j,0.52162+0.059837j,-0.38974-0.084902j,-0.17952-0.18165j,0.27035+0.59518j,-0.68537-0.61537j,-0.37246+0.23431j,-0.1017-0.20481j,-0.34782+0.57405j,-0.11819+0.40203j],[0.067234-0.15661j,-0.073948-0.00262j,-0.92254+0.33893j,-0.10483-0.11332j,0.12249+0.74815j,-0.52057+0.44605j,-0.73224+0.39592j,-0.20533+0.21766j,-0.32439-0.15521j,-0.040788+0.42237j,-0.017121+0.017433j,0.27603+0.59255j,-0.26314+0.37472j,-0.52895-0.54478j,0.033085-0.10062j,-0.15764+0.14199j,-0.1719-0.032849j,-0.85342+0.26761j,0.15301-0.013393j,0.58051+0.35362j,0.68336+0.30569j,-0.13158-0.29808j,0.31199-0.2738j,0.013301+0.015646j,0.9006+0.24225j,0.73823-0.29411j,0.25637-0.025292j,0.064014-0.0047134j,-0.37415-0.60954j,-0.16598-0.35376j],[0.062656-0.25006j,-0.45026-0.51502j,0.37392+0.1481j,-0.23387+0.30121j,-0.50111-0.71255j,0.18437+0.2292j,0.24039+0.547j,0.24625-0.37974j,0.24766+0.50039j,0.38204-0.19593j,0.24742+0.15162j,0.91885+0.26727j,-0.12807-0.20354j,0.73381+0.10044j,-0.017781-0.68133j,-0.072959-0.066203j,-0.025659+0.16154j,0.0721+0.5115j,0.93658+0.17861j,0.011755-0.034622j,0.11158-0.044666j,0.11497-0.53422j,0.14555-0.10715j,0.1856+0.90484j,0.12797+0.10179j,-0.35233+0.45744j,0.70841-0.25214j,0.080998-0.76304j,0.023533+0.64163j,-0.80368-0.14207j]])
                init_vel=np.array([[-0.41112+0.019789j,-0.27388+0.51527j,0.49075-0.14534j,-0.51967-0.84987j,-0.083777-0.33617j,-0.22056-0.34968j,-0.29459+0.092982j,0.42929-0.54503j,0.59785+0.70234j,-0.32157-0.19904j,-0.22421-0.0053273j,-0.28823+0.38068j,0.17091+0.046521j,-0.46493-0.81061j,-0.063655+0.075947j,0.88934+0.10814j,-0.32374-0.45362j,0.12891+0.12417j,-0.25043+0.44445j,0.073287+0.070272j,0.45363-0.21332j,-0.44505+0.6787j,-0.13211-0.038296j,0.86366+0.30966j,0.11532+0.32334j,0.52561-0.50744j,0.35227-0.18583j,-0.3104-0.08736j,0.29133-0.46569j,-0.33471-0.13426j],[-0.20505-0.56668j,0.28921-0.46993j,0.080937+0.016455j,-0.069716+0.34761j,-0.62856-0.6252j,0.20808+0.064093j,0.041471+0.72492j,-0.0019279+0.0096108j,0.39961-0.65931j,-0.46962+0.52493j,-0.26848+0.017578j,-0.59251+0.19481j,0.8177-0.14029j,-0.092364-0.055758j,-0.35644-0.33589j,0.085646+0.049836j,0.090856+0.76713j,-0.039182+0.33668j,0.5224+0.74067j,0.2918-0.26003j,-0.3477+0.25591j,-0.042768-0.48376j,-0.15213-0.35911j,-0.23606+0.6734j,-0.17444-0.91963j,-0.56169-0.32007j,0.23337-0.71258j,0.54974-0.052745j,-0.3018+0.13453j,-0.09053+0.75107j],[0.73953-0.12795j,-0.040037-0.5822j,-0.44768+0.56335j,0.11941+0.96389j,-0.38298-0.2451j,-0.07308+0.10222j,-0.17056-0.76407j,-0.10016-0.83724j,0.02748+0.03263j,0.25469-0.68361j,0.48199-0.46974j,0.23026-0.053707j,0.28587+0.71165j,-0.082615-0.16242j,0.072436-0.17916j,0.043613-0.0069634j,-0.25633+0.17777j,-0.010356+0.20989j,-0.36327+0.5134j,0.045311+0.030494j,0.95364+0.29273j,0.24783-0.85943j,0.72785-0.57466j,0.59248+0.17695j,-0.022029-0.12281j,0.75233+0.35798j,-0.18704+0.81401j,-0.20952-0.95645j,-0.60895+0.11369j,-0.0025526-0.41389j]])
            case 5:
                init_pole=np.array([[-0.47961+0.15452j,0.24857-0.18143j,0.35172-0.3201j,-0.3656-0.69818j,0.47915+0.46618j,-0.0034105+0.021284j,-0.062638+0.29423j,0.45397-0.86953j,-0.80075+0.010551j,0.30212-0.51552j,-0.84158-0.42706j,-0.70126+0.19694j,0.019332-0.017172j,0.64189+0.075411j,-0.34487+0.14029j,0.61517+0.5565j,-0.16883+0.33208j,-0.48003+0.72864j,-0.64007-0.19275j,-0.51871+0.39808j,-0.40483-0.039211j,0.88967-0.28343j,-0.39215+0.28461j,0.2771+0.31168j,0.85276+0.49889j,-0.17485+0.34736j,0.24602+0.018089j,0.72901+0.49794j,-0.37924-0.4097j,0.14693-0.024008j],[0.17783+0.62188j,0.010959-0.13829j,-0.078957+0.35375j,-0.40024-0.66983j,-0.1115+0.073424j,-0.11639-0.54761j,0.7466-0.57016j,-0.22088+0.18266j,-0.30458-0.84276j,-0.68246-0.56191j,-0.25251+0.48766j,-0.13007-0.5619j,-0.081312-0.43907j,-0.23727-0.46406j,-0.86652+0.35688j,0.33565-0.77992j,0.014057+0.59302j,-0.66295+0.65721j,-0.19132-0.078433j,-0.05779+0.043032j,-0.36605-0.5575j,-0.14019-0.79874j,0.37234-0.65881j,0.90249+0.36039j,0.44502+0.74075j,-0.14521+0.43094j,-0.7599-0.19462j,0.55312+0.72727j,0.37976-0.46306j,-0.81206-0.38736j]])
                init_vel=np.array([[-0.48548-0.87064j,0.10296+0.50507j,0.30938+0.29864j,-0.057579-0.041605j,0.060626+0.022406j,0.82036+0.10165j,0.30302-0.53341j,-0.87916-0.11179j,0.15595+0.1099j,0.6989+0.56366j,0.3134+0.39451j,0.81908+0.023575j,0.11745-0.16444j,0.42648-0.034999j,-0.083205+0.61445j,-0.71929-0.035501j,0.041816-0.5153j,-0.082525-0.13297j,0.33071+0.61105j,-0.70472-0.45024j,0.33632-0.12849j,-0.36891+0.1149j,-0.7189-0.14946j,-0.29513-0.62785j,0.05273+0.78246j,0.073271-0.08115j,0.44905+0.38409j,-0.015611+0.047858j,0.41723-0.72235j,-0.66611+0.54981j],[-0.55354-0.00073499j,-0.29777-0.14383j,-0.23377-0.4327j,0.8334+0.30583j,0.25081+0.35687j,-0.36226+0.15629j,-0.60587-0.55054j,0.61077-0.7028j,0.21662-0.14122j,-0.58998-0.063247j,-0.57066-0.22334j,0.055649-0.52897j,0.3933-0.22656j,-0.96555-0.031152j,0.56065+0.41139j,-0.29791-0.17773j,0.48276+0.27722j,-0.55886-0.059848j,0.39507-0.16058j,-0.68109+0.26653j,-0.25314-0.37713j,0.41432-0.65561j,-0.40585-0.14292j,-0.63478+0.70035j,-0.62058-0.33572j,-0.32493+0.21556j,-0.43108+0.15874j,-0.18618+0.1328j,-0.012863+0.0089048j,-0.049933+0.060013j]])
            case 6:
                init_pole=np.array([[-0.13735-0.028379j,0.037308+0.07839j,0.09814+0.23783j,-0.34967+0.24132j,0.47203+0.14925j,-0.037818+0.24062j,0.0031901+0.074021j,0.0032677-0.00091789j,0.00054423-0.0011812j,0.064038+0.12728j,0.065616+0.16212j,-0.24274+0.54749j,-0.66318-0.66531j,-0.44769+0.18039j,-0.52375-0.00546j,0.0053239-0.06815j,-0.0025529-0.17383j,0.68257+0.66747j,-0.55172+0.78753j,0.0043994+0.0058863j,-0.33124-0.62342j,-0.18903-0.51895j,0.77091+0.047328j,-0.068101+0.36456j,0.71263-0.47491j,0.31415+0.049463j,0.47397-0.77705j,0.55415+0.20714j,-0.74108-0.42252j,-0.17262-0.88773j],[-0.054355-0.25439j,-0.22213+0.36748j,-0.12994+0.26768j,-0.1137-0.035814j,-0.66799-0.22979j,0.0419+0.78395j,0.22311+0.3246j,0.20289-0.086799j,-0.025759-0.18742j,-0.17136+0.20616j,0.13865+0.001044j,-0.2805-0.85628j,-0.21314-0.059118j,-0.087611+0.36566j,0.019199-0.26418j,-0.38745-0.20066j,-0.015932-0.020682j,-0.43043-0.011897j,0.63816+0.41717j,0.21757+0.6443j,-0.58631+0.26913j,-0.0092949+0.21791j,-0.22335-0.045937j,0.84057-0.2953j,-0.31436+0.25125j,-0.28839-0.53598j,0.89456-0.16193j,-0.3165+0.10213j,-0.17151-0.4078j,-0.019495-0.026848j]])
                init_vel=np.array([[-0.71458-0.13334j,0.36721-0.45099j,-0.023836+0.052497j,0.003987-0.2848j,0.74235+0.6121j,-0.19073-0.029764j,-0.22968-0.90418j,-0.070366+0.264j,0.33747-0.2093j,-0.0044233+0.13104j,0.048185-0.0778j,0.010401-0.0035166j,-0.68066-0.40047j,0.21022-0.39564j,-0.057442+0.021693j,0.29725-0.5694j,0.22035+0.80753j,0.56444+0.63067j,-0.25159-0.12031j,0.14207+0.18961j,0.5197-0.33857j,0.16892+0.035469j,0.086562-0.24014j,-0.67442+0.61254j,-0.47713+0.54611j,-0.13744-0.55942j,-0.19163+0.35548j,0.088876-0.01417j,-0.43685-0.26589j,-0.26348+0.67617j],[0.18007-0.32763j,0.028191-0.11264j,-0.93592+0.28981j,0.45876+0.37885j,-0.023149+0.18433j,0.33661-0.058419j,-0.14805+0.36153j,0.089588-0.12273j,-0.24017-0.28764j,0.36926+0.23002j,-0.52959-0.31193j,0.53163+0.21447j,-0.0515+0.22966j,0.20631+0.53066j,-0.38909+0.30808j,-0.098128-0.19832j,-0.40297+0.88352j,-0.23968-0.44563j,0.36064+0.65374j,-0.94655+0.14334j,-0.5683-0.19328j,0.085222+0.029996j,-0.81881+0.25825j,0.17247-0.67804j,-0.22515-0.046406j,0.56037-0.58575j,-0.5804-0.80009j,0.28507+0.14744j,-0.051949+0.031215j,-0.048316+0.55445j]])
            case 7:
                init_pole=np.array([[0.6329+0.41853j,0.67243-0.39753j,0.78769+0.15224j,0.34734+0.35737j,-0.044569+0.058122j,-0.17857+0.075213j,0.032939+0.021224j,0.30348-0.46923j,-0.51659+0.036088j,-0.93681-0.22048j,-0.90738+0.2255j,0.20903+0.33668j,-0.69115+0.3079j,0.23093+0.48267j,-0.0242+0.045401j,0.52718-0.063309j,0.42723+0.063908j,-0.013935+0.0091583j,-0.32535+0.35084j,0.63686-0.17985j,0.12335-0.15517j,0.87268-0.1159j,-0.070892-0.16462j,0.68315-0.49645j,-0.49878+0.72157j,0.34194-0.73867j,0.11347-0.31448j,-0.70199+0.010688j,0.46556-0.8328j,-0.22931-0.21025j],[-0.96914+0.22631j,-0.12219-0.15299j,0.10945+0.40987j,0.8078+0.043935j,0.11237-0.58021j,0.41186+0.13157j,-0.78589-0.52717j,0.11469-0.14368j,0.1844+0.97699j,0.051609-0.67698j,-0.3072-0.36815j,-0.15106-0.68871j,0.74358-0.66187j,-0.64495-0.7163j,0.099425-0.28765j,0.62904+0.64535j,-0.42366-0.33912j,0.5977-0.53313j,0.066454+0.24809j,0.12066+0.1192j,0.18787+0.052526j,-0.097758+0.46085j,0.81631-0.52198j,0.21412+0.57687j,-0.68448+0.38403j,-0.6356-0.63499j,0.54421+0.24458j,0.012202-0.37726j,0.30086+0.45181j,0.064865-0.029443j],[0.18625+0.010934j,0.99232+0.008848j,-0.69988+0.2035j,-0.051165-0.35282j,-0.83905+0.35276j,0.71303+0.22985j,0.042759+0.76248j,0.48499-0.11286j,0.12731+0.84532j,-0.23215+0.33003j,0.20122-0.11505j,-0.49324-0.26211j,-0.75319+0.59915j,-0.082272-0.081245j,0.58019-0.0019034j,0.060194+0.53719j,0.54661+0.4569j,-0.13604-0.042445j,-0.34397+0.13384j,-0.27409+0.050925j,-0.11721-0.3051j,0.26946+0.30097j,-0.31253-0.26143j,0.010469-0.37647j,0.2596+0.38573j,-0.030826-0.42813j,0.85922-0.27447j,-0.035059-0.73412j,-0.52079+0.14315j,0.092722-0.15659j]])
                init_vel=np.array([[0.46594+0.76464j,-0.85484-0.011821j,0.39002+0.11885j,-0.077696+0.13392j,-0.10372-0.23239j,0.37815-0.1488j,0.052644-0.15837j,0.026901-0.32206j,0.19573-0.71402j,-0.31631+0.76518j,-0.13154+0.50622j,-0.60869-0.53486j,0.31736-0.60204j,-0.38012+0.058284j,0.23573-0.71749j,0.28626-0.44433j,-0.54103-0.26395j,0.046026-0.92834j,0.52066-0.14651j,-0.053686+0.32135j,0.72888-0.1703j,-0.82469-0.11256j,0.66745-0.59301j,0.20647+0.27849j,-0.70282+0.24976j,-0.0083485+0.023724j,0.23438-0.74539j,0.073472+0.88924j,0.222-0.037016j,0.59165-0.71427j],[0.30719-0.49494j,0.034865-0.00014689j,0.008235+0.035438j,0.018393+0.14273j,0.31501-0.076437j,0.38593+0.014154j,0.020074+0.18702j,0.35562-0.68251j,-0.3301+0.60912j,-0.25296-0.14858j,-0.26621+0.18696j,0.55614-0.030825j,-0.10495-0.20876j,-0.43389+0.31911j,0.77445+0.60126j,-0.031399+0.04074j,-0.26065-0.81658j,-0.3141+0.26276j,-0.18628-0.091941j,-0.068978-0.066696j,0.46606+0.27921j,0.46624+0.29657j,-0.33063+0.13334j,-0.4545-0.42581j,0.069908-0.10427j,-0.41215+0.04342j,0.36615-0.028846j,-0.071719-0.23176j,0.34473-0.060599j,-0.041868+0.029668j],[0.28853+0.5063j,-0.54447+0.69823j,-0.59764+0.44673j,0.5578-0.23674j,-0.37166+0.15265j,-0.46911-0.38961j,0.086237-0.038958j,-0.20962-0.10427j,0.13677+0.81265j,0.14889-0.27118j,0.53848-0.63404j,0.075427+0.25191j,0.0030127+0.45642j,-0.80436-0.58007j,0.10189-0.21152j,-0.68498+0.32196j,-0.046742-0.98717j,-0.00030832+0.00014674j,0.12858-0.17763j,-0.63525-0.39403j,-0.33813-0.0010599j,0.79084-0.53988j,0.10819-0.53558j,-0.053136+0.79485j,0.27271+0.77586j,-0.38338+0.62288j,0.40288+0.62651j,-0.09191+0.091367j,-0.17781-0.22539j,-0.40044-0.43693j]])
            case 8:
                init_pole=np.array([[0.70784-0.68531j,0.30706+0.65162j,-0.77489-0.43296j,0.65437-0.7458j,-0.88651-0.1629j,-0.10445-0.029126j,-0.53306+0.19365j,-0.45519-0.48138j,-0.54226+0.7946j,0.6672-0.19925j,0.13939-0.87905j,-0.032158+0.10932j,0.14165-0.63642j,-0.12163+0.25422j,-0.68258-0.32478j,-0.035796-0.10816j,-0.047782+0.016791j,-0.28478-0.56219j,-0.010622-0.60306j,0.02395+0.0261j,0.065829+0.085677j,0.24193-0.4952j,-0.8713+0.040329j,-0.44624-0.11018j,0.44009+0.10252j,-0.49008+0.55566j,0.36875-0.21569j,0.29454-0.2212j,-0.7185-0.41362j,-0.64055-0.11338j],[0.5572+0.050419j,0.43305-0.21623j,-0.1294-0.15084j,0.37774+0.13855j,-0.34099-0.93515j,-0.010615-0.034519j,0.82678+0.49175j,0.14972-0.50144j,0.51032-0.17717j,0.46513+0.23185j,0.28336-0.16953j,0.17983+0.25364j,-0.0086349+0.065594j,0.42185-0.77237j,-0.54289-0.26313j,0.28043-0.93752j,-0.45539+0.099804j,0.18938-0.13104j,-0.039591+0.59857j,0.36673+0.35988j,-0.39577-0.2342j,-0.13646-0.79376j,-0.029368-0.043146j,-0.19264+0.93898j,-0.15369+0.29589j,-0.18404+0.4722j,0.11118+0.12687j,-0.94182+0.0020784j,-0.20015-0.59376j,0.71193+0.14544j],[-0.25653+0.89766j,0.58129+0.26546j,-0.22983-0.3217j,0.26869-0.60158j,0.15286+0.63503j,0.59508-0.16709j,0.6982+0.26303j,-0.093862-0.24235j,-0.030027-0.0038298j,0.015744+0.056892j,0.046652-0.22491j,0.13183-0.18655j,0.038276+0.27276j,0.19468-0.39941j,-0.17575+0.76329j,-0.79208+0.3045j,-0.059089+0.32025j,0.48671-0.31524j,-0.16603-0.41656j,0.14794+0.37994j,0.40383+0.20055j,0.62617-0.31481j,0.16938-0.1399j,0.78105-0.11889j,0.058248-0.0099723j,0.14495+0.13769j,-0.37086+0.65384j,-0.012861-0.01138j,0.52962+0.09873j,0.044026-0.083605j]])
                init_vel=np.array([[-0.32281-0.10671j,0.48037-0.32769j,0.016831-0.051286j,-0.59836-0.017797j,-0.55018-0.28113j,-0.13494-0.016989j,-0.080753-0.22374j,-0.22822+0.82746j,0.56341+0.3252j,-0.043713-0.66033j,0.0080667-0.018044j,0.053438-0.11174j,0.23035-0.17648j,-0.33563-0.26525j,-0.66586+0.60308j,-0.46228+0.81654j,0.45055-0.84176j,0.67578-0.63553j,-0.060212-0.58851j,0.79186-0.10177j,0.43989+0.66336j,0.088646-0.069207j,-0.77392+0.4989j,0.45062-0.47194j,0.95649+0.18488j,0.065755+0.28999j,0.18415-0.25121j,-0.35176+0.19477j,-0.0039535+0.10549j,-0.0039084+0.15517j],[0.5831-0.61393j,0.63769+0.68745j,0.017934-0.010173j,-0.094295+0.064119j,-0.055149-0.043458j,0.78707-0.053562j,-0.20688+0.12871j,0.22176-0.66205j,-0.51501-0.035998j,-0.11615-0.018202j,0.35795+0.89539j,-0.30267-0.35618j,-0.75102-0.072778j,0.017508-0.26662j,0.62782+0.36943j,0.13653-0.21588j,0.11927+0.23971j,0.065969+0.018752j,-0.18766+0.078186j,-0.40401+0.29745j,-0.1073+0.20724j,0.009643+0.51568j,-0.12993-0.48099j,0.79491+0.45776j,0.0039669-0.19724j,-0.169-0.35859j,-0.6474-0.2496j,-0.18547+0.22964j,0.53598-0.25564j,-0.00059811+0.00027588j],[0.23745+0.064563j,0.023996-0.041325j,0.44322+0.51765j,0.36784+0.70619j,0.015348+0.067557j,-0.092213+0.0058509j,0.10233+0.022723j,-0.41813+0.60294j,-0.21865+0.24232j,0.049652-0.13923j,0.69177+0.6805j,0.65333+0.066399j,-0.53642-0.1541j,0.46327-0.59456j,-0.041152-0.40474j,-0.36916+0.38468j,0.17174+0.18179j,-0.11593-0.27605j,-0.4631+0.43576j,-0.60539+0.23887j,-0.23537+0.55282j,-0.31175+0.77768j,0.17202+0.21789j,-0.49518+0.12139j,-0.03433-0.10575j,-0.39379-0.14821j,0.074923-0.053169j,-0.30576+0.021191j,-0.27658+0.058626j,-0.083337-0.27107j]])
            case 9:
                init_pole=np.array([[0.35981-0.18002j,-0.45007+0.72843j,-0.20112+0.31482j,-0.21873-0.010727j,-0.32388+0.28803j,-0.048898-0.050716j,-0.67056+0.11218j,0.74295+0.42997j,-0.57398+0.19851j,0.11666-0.11287j,-0.71261+0.2956j,-0.41254+0.084324j,-0.57283+0.12234j,-0.72634+0.057483j,0.21737+0.12958j,0.57928-0.48917j,0.044383-0.052568j,0.51398-0.5283j,0.49644+0.59772j,0.42233-0.051836j,0.68081-0.5185j,0.52154+0.046303j,0.083422+0.69901j,-0.088834-0.56069j,-0.71632-0.44435j,0.034372+0.93837j,0.0013551+8.677e-05j,0.084437-0.022829j,0.022231+0.0050559j,0.0065542+0.341j],[-0.054559+0.17346j,0.37091-0.45135j,0.14332+0.16914j,0.32436-0.40929j,-0.24808-0.69856j,-0.8065+0.25987j,0.12989-0.042467j,-0.037234+0.19633j,-0.46289-0.28395j,-0.0055469+0.0010906j,-0.018331-0.76457j,0.036441-0.043586j,-0.17414+0.0020741j,0.068733+0.52985j,0.83608+0.37677j,0.093638+0.88207j,-0.043701-0.17825j,0.64452-0.26459j,-0.39445+0.31035j,-0.37526-0.48249j,-0.66662+0.074739j,-0.21409-0.20846j,-0.37596-0.065454j,-0.69321-0.55476j,-0.82133+0.36505j,-0.73554+0.35201j,-0.0023959-0.0019524j,0.21523+0.14715j,0.32028-0.27798j,0.5405+0.030308j]])
                init_vel=np.array([[-0.70804-0.40345j,0.73671+0.48107j,-0.35201+0.019604j,-0.3128+0.49456j,0.30896+0.56963j,-0.045146-0.13227j,-0.12134-0.20913j,-0.78317+0.34891j,0.33959+0.91084j,-0.09955+0.82945j,0.046887-0.016952j,-0.40576-0.85143j,0.12783-0.79627j,0.74785-0.25341j,-0.0058141+0.049223j,0.090881-0.64711j,-0.40924-0.88259j,-0.4143+0.38833j,-0.1899+0.17184j,-0.44006+0.077313j,0.097207-0.014868j,0.015716-0.022723j,-0.87443+0.21273j,0.12002-0.0066403j,0.63002-0.31884j,-0.031754-0.014321j,0.43184-0.85416j,-0.3869-0.5076j,-0.21413+0.031747j,0.71994+0.067388j],[-0.12355+0.066907j,0.094292+0.014344j,-0.10484+0.58409j,-0.15525+0.64938j,-0.34942+0.25635j,0.21578+0.7203j,-0.60928+0.22776j,0.03819+0.075232j,-0.023412-0.021015j,-0.77765-0.30607j,-0.12085-0.53234j,0.31106-0.081158j,-0.46881-0.37669j,0.74372+0.29253j,0.28221-0.023674j,-0.4838+0.075522j,-0.64884+0.37315j,0.068384+0.29104j,0.87121+0.16431j,-0.40817+0.70656j,-0.80796-0.29343j,-0.75326+0.49099j,0.24177-0.46501j,-0.17579-0.026651j,-0.0573-0.82938j,0.7433-0.14772j,0.33189-0.086083j,-0.24941+0.23547j,0.66877-0.41336j,0.15427+0.23228j]])
            case 10:
                init_pole=np.array([[0.22222-0.41593j,-0.0398+0.044485j,-0.86841-0.19315j,0.398+0.18233j,0.89581+0.41017j,0.18124+0.17759j,0.43877-0.32328j,0.60951+0.57365j,0.14408-0.14402j,0.84477+0.2278j,0.75909+0.39639j,-0.20979+0.058775j,-0.14868-0.45031j,-0.32412-0.33952j,-0.26308-0.42842j,-0.12954+0.026812j,0.54854+0.25031j,-0.30815+0.80804j,-0.2634-0.37438j,-0.073728-0.33088j,-0.52548+0.039698j,0.71623-0.30474j,0.20662+0.18717j,-0.34386-0.79336j,0.23567-0.044734j,0.031134-0.47839j,-0.76625+0.53529j,-0.70864+0.019399j,-0.03557-0.89901j,0.28406+0.1793j],[-0.5424-0.025358j,0.096237+0.65095j,-0.026921+0.10628j,0.24123+0.1426j,-0.51362+0.32678j,-0.12421+0.046473j,-0.50175+0.65841j,-0.75601-0.35061j,-0.31604+0.44329j,0.075749+0.094356j,-0.053526-0.89818j,-0.037825-0.067045j,-0.7525-0.36197j,0.29762-0.28745j,0.08893-0.088469j,0.54921+0.67535j,-0.059106-0.25863j,-0.027621-0.051125j,-0.70851-0.14j,-0.40104-0.012125j,-0.89415+0.012145j,-0.053249+0.044457j,0.022813+0.37868j,0.22336-0.35564j,0.12975+0.5834j,-0.77598-0.45303j,-0.81626-0.051562j,-0.43167-0.60501j,-0.02092+0.061795j,0.0019915-0.0038506j]])
                init_vel=np.array([[0.37209-0.11543j,0.176+0.034622j,0.58881-0.68747j,0.50498-0.86289j,-0.025417-0.026719j,-0.72605+0.68418j,-0.37018-0.7912j,-0.66712-0.72813j,-0.50841-0.24477j,0.19803-0.27372j,-0.0056228-0.012444j,0.91957-0.075706j,-0.00091078+0.47389j,0.26651+0.15631j,0.30711-0.93274j,0.62467+0.77137j,-0.25124+0.34407j,-0.16483-0.10087j,0.60183-0.40718j,0.43124+0.7081j,0.50179-0.22993j,-0.23112-0.54048j,-0.0033833+0.052114j,0.0047006+0.60854j,0.34413-0.21596j,0.15355-0.53366j,0.073155+0.15257j,-0.29194-0.29939j,-0.08227-0.13708j,-0.0011244-0.017885j],[0.7664-0.11717j,-0.10928+0.004203j,0.039213+0.87547j,0.3362-0.79618j,0.54463+0.0076596j,0.42157-0.28881j,-0.050832+0.048447j,0.039009+0.92189j,0.42862-0.049424j,-0.15034+0.70487j,-0.23502+0.29101j,0.47214+0.27518j,0.18669-0.46011j,-0.93256-0.18552j,-0.036036-0.5123j,-0.42158+0.1734j,-0.21127+0.028719j,0.50706+0.66058j,-0.33717-0.40859j,-0.4686-0.20597j,0.044041-0.20869j,-0.13956+0.030075j,-0.61961-0.28809j,-0.092652+0.19916j,0.47308-0.41591j,0.11397-0.057341j,-0.00099335-0.00010993j,0.41759-0.25345j,-0.51165+0.42766j,0.049341-0.10903j]])
            case 11:
                init_pole=np.array([[0.16683+0.5767j,0.03818-0.037616j,-0.37717-0.047447j,-0.82818+0.31036j,-0.10543-0.22549j,-0.047998+0.013504j,0.7255+0.1766j,0.24037-0.099653j,-0.028854+0.46022j,-0.11643+0.14682j,-0.25806-0.18027j,-0.055475+0.7887j,-0.033437-0.040456j,-0.54542-0.77295j,-0.41697+0.29358j,0.0039554+0.077386j,-0.063557+0.36499j,-0.47726+0.19968j,0.018708+0.39757j,-0.59713+0.44993j,-0.3788+0.024742j,0.2907+0.65672j,-0.36177+0.6393j,0.05856+0.10532j,-0.00019906+0.022413j,0.70803-0.54497j,-0.18708+0.4577j,0.19495+0.21276j,0.35799-0.31353j,-0.22229+0.91149j],[-0.078857+0.031719j,-0.40588-0.33617j,0.76679+0.26968j,-0.68047-0.21172j,-0.17468+0.18282j,0.65456+0.20292j,0.93715-0.2771j,-0.87438-0.073593j,0.0051263-0.090817j,0.0095467-0.5316j,-0.65873+0.30697j,0.16927+0.11474j,0.54091+0.59101j,0.042588-0.081051j,0.45928-0.40887j,0.052513-0.84899j,0.62193+0.023879j,-0.33141+0.93342j,0.64217-0.26986j,-0.41689+0.054212j,-0.039615+0.3166j,0.26667-0.3156j,-0.0050174-0.63729j,0.93767-0.29037j,-0.047404-0.025509j,-0.46301+0.051097j,0.063733+0.023087j,-0.16613+0.21163j,0.36504+0.049006j,-0.0013366+0.62042j],[0.90887+0.15715j,0.034167+0.11384j,0.15816-0.18592j,-0.34527-0.15423j,0.67641+0.36212j,-0.045725-0.61859j,-0.018392-0.38347j,0.046041+0.80478j,0.56378-0.023596j,0.27349+0.22639j,-0.062334-0.51199j,-0.64617+0.20564j,-0.64897+0.19821j,-0.32419+0.84862j,-0.096576-0.30096j,-0.036756+0.13977j,-0.70409+0.70665j,-0.057522+0.21911j,0.041263-0.049757j,-0.7446-0.32219j,0.984-0.063521j,0.096564+0.020081j,-0.04549-0.058166j,-0.47855-0.13341j,0.12147-0.071347j,-0.52495+0.19746j,0.021384-0.89739j,-0.47149+0.36161j,0.36537-0.54436j,-0.28209+0.020633j]])
                init_vel=np.array([[0.68886-0.23868j,-0.93258+0.289j,-0.070611-0.96512j,-0.0016277+0.00076698j,0.090744+0.07591j,-0.33053+0.50591j,-0.68288-0.091163j,-0.079872-0.080325j,-0.49987-0.25318j,-0.37369-0.70526j,-0.10489+0.33506j,-0.99289-0.0088252j,-0.81532-0.4106j,-0.23686-0.77451j,0.049741+0.0215j,0.14719+0.48941j,0.47282+0.16546j,0.31747+0.53911j,-0.073772+0.13463j,0.76971+0.36204j,-0.0013645+0.0058541j,-0.53629-0.040806j,-0.074965-0.66387j,0.06333+0.95778j,0.53995-0.82326j,0.0094267-0.033322j,-0.18106-0.43774j,0.18527-0.33911j,0.014891-0.82451j,0.84257+0.3838j],[-0.20221-0.012849j,0.34627-0.48169j,0.88617-0.13216j,0.18929+0.68613j,-0.02763+0.027557j,0.21139-0.47119j,0.14394-0.93501j,-0.20232+0.29118j,0.40213-0.46231j,0.64903-0.46023j,-0.054284+0.0011871j,-0.027427+0.16014j,-0.41116+0.25088j,-0.18659-0.007915j,-0.38396+0.47266j,0.010825-0.025552j,-0.23483+0.23468j,0.48985-0.30137j,0.10118+0.34214j,0.32136-0.10434j,-0.3086-0.74015j,-0.15605-0.85682j,-0.00017077-0.17883j,-0.59091-0.07786j,-0.46084-0.75663j,-0.44265+0.087022j,0.94795-0.078489j,-0.11754-0.41511j,-0.4529+0.0093288j,0.72642-0.14546j],[0.056255-0.20883j,-0.23507+0.1934j,-0.18799-0.027719j,-0.38615+0.77707j,-0.28787+0.52438j,-0.0073591-0.0014848j,0.63579+0.59903j,-0.12266+0.20854j,0.095534+0.28524j,0.2453+0.74157j,0.54579-0.45207j,-0.11099-0.024048j,0.84814+0.078903j,-0.18154+0.16778j,0.076784+0.77343j,-0.77655+0.61468j,0.027195-0.17174j,-0.31636+0.6811j,0.01554-0.14311j,0.15006+0.23068j,0.31428+0.38554j,0.6518-0.31251j,-0.45977+0.30276j,0.15611+0.79336j,0.086446-0.19558j,-0.0050398+0.012841j,0.031099-0.247j,-0.68622-0.46848j,0.25191-0.28525j,0.60013+0.42889j]])
            case 12:
                init_pole=np.array([[-0.22605+0.49808j,-0.0034068-0.72416j,0.4648-0.32407j,-0.12201-0.93611j,-0.7435+0.26352j,0.20512-0.24884j,-0.071432-0.014205j,-0.89113-0.23789j,-0.21419-0.4938j,-0.43841+0.84494j,0.18795+0.14095j,0.47854+0.68124j,-0.67529+0.19884j,0.14216-0.55029j,-0.093449-0.351j,-0.15881+0.44065j,0.020327+0.20543j,-0.36459-0.32277j,-0.18869+0.85782j,0.040118-0.074094j,0.7271+0.24747j,-0.19606+0.41499j,0.32843-0.13177j,0.17227+0.93682j,0.15282-0.32738j,0.55413-0.42917j,0.89985-0.05445j,-0.29721+0.018729j,-0.43747-0.69082j,-0.019811-0.081446j],[0.40105-0.039313j,0.33483-0.51429j,0.64068+0.49776j,-0.17688-0.85331j,-0.47231-0.026104j,-0.42821-0.87721j,0.72256-0.20552j,-0.064626+0.32058j,0.12012+0.44745j,0.055878-0.051916j,0.38581-0.10134j,0.55662+0.82519j,-0.4548-0.81385j,-0.088416-0.37044j,0.39355-0.10618j,0.12462-0.48775j,-0.33031+0.074488j,0.18816+0.18263j,-0.0054565-0.060705j,0.51707-0.22332j,-0.21016-0.10081j,-0.86013+0.038211j,-0.34504+0.03852j,0.24564+0.16908j,0.099781-0.73489j,-0.0024977-0.0057028j,0.31124+0.066889j,-0.1082-0.062624j,0.92866+0.31668j,-0.33674+0.025628j],[-0.10216-0.031956j,0.39053+0.67862j,-0.01778-0.5765j,0.33942+0.37743j,-0.81364-0.15781j,0.095618-0.26126j,0.75931+0.33812j,-0.79829+0.096262j,-0.6384-0.51582j,0.47399+0.52683j,0.15362+0.21975j,0.54954+0.34667j,0.3362-0.59986j,-0.6252+0.10872j,-0.36846-0.013377j,0.077786+0.90721j,-0.42003-0.3914j,0.41293+0.40672j,-0.37417+0.23317j,-0.43444+0.31955j,-0.0085987-0.5873j,0.11708+0.65038j,-0.24575-0.063091j,0.14722+0.058466j,0.23621+0.66521j,-0.20681-0.31203j,-0.53073+0.27356j,0.3364+0.19404j,-0.80762-0.3013j,-0.17455-0.15903j]])
                init_vel=np.array([[-0.17364+0.12469j,-0.052612-0.089378j,-0.073371+0.22986j,0.30789-0.27563j,0.81983-0.26307j,0.67187+0.39522j,0.34494+0.17058j,-0.073603+0.086816j,-0.48928+0.69232j,0.2525+0.89074j,0.70661-0.39471j,-0.010665-0.26823j,0.2213+0.052043j,-0.046784+0.25418j,-0.24224+0.78728j,0.45515-0.54246j,0.15529-0.13198j,-0.47663-0.44286j,-0.18971-0.28178j,0.92066+0.23735j,-0.40551-0.45106j,0.038207-0.85784j,0.15467+0.24008j,0.37576+0.33672j,0.31393+0.21999j,0.054116+0.013804j,-0.30137+0.29504j,0.71515+0.22679j,-0.093035+0.02458j,0.27276+0.50079j],[0.64534-0.02032j,0.36803-0.084072j,-0.61105-0.12105j,-0.17966+0.12311j,-0.2753+0.069492j,-0.83036-0.47143j,-0.14225-0.078859j,-0.025018-0.15684j,0.56603-0.13873j,0.06578-0.5713j,-0.48677-0.36565j,-0.19371+0.17056j,-0.047859+0.0084696j,-0.19667-0.022164j,-0.47451-0.65722j,0.21416+0.83226j,-0.040732+0.99251j,0.10913+0.18545j,-0.18949-0.056934j,0.041144+0.39246j,0.71192-0.062343j,0.69552-0.60294j,0.29761-0.73915j,0.43377-0.42986j,0.61139-0.39646j,0.13786-0.0099196j,-0.41116-0.011174j,-0.14781-0.9698j,-0.33431-0.19011j,-0.78719+0.57805j],[-0.026282+0.37973j,-0.12496-0.23126j,0.52291+0.0048074j,-0.27149+0.8145j,-0.14422+0.59826j,0.52608+0.75426j,-0.18363+0.7753j,0.22389-0.27656j,0.56141-0.16859j,-0.0074621-0.0066231j,-0.14216-0.45838j,-0.0045448+0.48099j,-0.10367-0.13377j,0.016489+0.60547j,0.62259-0.50593j,-0.62929+0.4627j,0.091595-0.019388j,0.11235-0.21645j,-0.0042331+0.50682j,-0.37569+0.44772j,0.10679+0.38708j,-0.73944+0.13035j,-0.14121+0.020997j,-0.46481-0.52847j,0.8659+0.19364j,-0.33687-0.7946j,0.081234-0.9557j,-0.070305-0.22268j,-0.26564+0.42392j,0.43156-0.23804j]])
            case 13:
                init_pole=np.array([[0.13071+0.18442j,0.039637+0.073586j,0.31333-0.84862j,0.27444+0.11619j,-0.74897+0.54206j,-0.096984-0.083941j,-0.1194+0.15578j,0.11877+0.29134j,0.033525+0.83851j,0.55158-0.33026j,0.49516+0.45902j,0.27123-0.24335j,0.44477+0.2119j,0.18757+0.14455j,0.72864+0.43033j,0.1259+0.85208j,-0.66484-0.20356j,0.63392-0.058087j,0.72693-0.46655j,0.23473-0.064787j,-0.18259-0.96583j,0.74788+0.42114j,-0.53137-0.20791j,0.077123-0.50786j,0.26196+0.4187j,-0.44157+0.43973j,0.090471-0.52527j,-0.35934+0.043256j,-0.6368-0.069309j,0.52056-0.53234j],[-0.26419+0.24603j,-0.24691+0.44929j,0.1258+0.71258j,-0.61727+0.31216j,0.061976+0.052545j,0.2522-0.018954j,-0.012363+0.12072j,0.37811+0.054685j,0.46167-0.49958j,0.21122-0.03491j,0.53812-0.26769j,-0.15253+0.078353j,0.31574-0.16145j,-0.25993-0.80385j,0.081936+0.36101j,-0.135-0.44383j,-0.90717-0.31687j,-0.37948-0.42652j,-0.15329-0.073121j,-0.69885+0.27709j,-0.30707-0.63976j,-0.13932+0.89868j,-0.54903+0.12407j,-0.31136-0.45153j,-0.48754+0.22059j,-0.026116+0.0032371j,-0.24368+0.21772j,-0.017599-0.13377j,0.54033-0.37687j,0.73104+0.41815j],[0.14007-0.29278j,0.81445-0.17416j,0.383-0.00054597j,-0.72614+0.49791j,-0.42911+0.22099j,0.16618+0.8682j,-0.14016+0.52532j,-0.75188+0.24742j,-0.4102-0.074546j,-0.53047-0.31564j,-0.28817-0.19206j,-0.62148-0.49635j,-0.4862-0.6036j,-0.6477+0.49719j,0.0028921+0.38322j,0.014885-0.57035j,-0.37254-0.39959j,-0.74849-0.54709j,-0.091371+0.15357j,-0.15996-0.1186j,0.040677+0.17066j,0.64729-0.7112j,-0.15999+0.074916j,-0.090542-0.13827j,-0.19871-0.0063522j,-0.17489+0.26653j,-0.14405-0.58471j,0.84438-0.34939j,0.13407+0.66189j,-0.5045+0.11143j]])
                init_vel=np.array([[-0.002947+0.021731j,-0.1566+0.053207j,0.098101+0.18992j,0.18042-0.46755j,0.32671+0.28984j,0.3919-0.72463j,-0.0011962-0.0017527j,0.66412-0.35129j,0.10266+0.1112j,0.31428-0.54932j,-0.72216-0.10192j,0.18046-0.0069158j,-0.90442+0.054379j,-0.021641-0.58021j,0.452+0.27825j,0.14558+0.02999j,0.17631+0.14662j,0.096329+0.11447j,0.015857+0.0012736j,-0.94026-0.24282j,0.78756-0.35126j,-0.40756-0.52004j,0.10461+0.026582j,0.049395-0.0027006j,-0.13692-0.83879j,-0.14994-0.52148j,0.75765-0.37495j,0.012772-0.11679j,0.72715-0.40248j,-0.10062+0.87799j],[0.54542-0.59652j,-0.045562-0.1758j,0.010119+0.29793j,0.55003-0.72429j,0.50098+0.27657j,0.027809+0.12299j,0.9383+0.15555j,-0.1387+0.0067043j,0.030515-0.49578j,-0.04064+0.6872j,-0.68714+0.51689j,-0.45415-0.3499j,-0.071538+0.029397j,-0.44498+0.16685j,0.067501-0.21706j,-0.61626-0.23095j,0.037909+0.17824j,0.14944-0.13702j,-0.68619+0.66782j,0.23892+0.17743j,0.88216-0.15915j,0.85675+0.38974j,-0.17559+0.03423j,-0.063929+0.031537j,-0.87101-0.48522j,0.86092+0.027212j,0.87768+0.045789j,0.50894-0.0091565j,-0.58251-0.72242j,0.033695-0.3864j],[-0.0095637-0.17895j,0.64957-0.23695j,-0.48629-0.59486j,-0.046399+0.034556j,-0.36147+0.43433j,0.076534-0.29019j,0.17081-0.74702j,0.17595-0.30177j,0.7222-0.36378j,0.14727+0.62238j,-0.62156+0.082056j,0.15386-0.055494j,0.048028-0.33511j,0.76108+0.26325j,-0.39664-0.58826j,-0.11957-0.6226j,0.062229-0.15427j,0.84691-0.44124j,0.012686+0.022342j,0.50917+0.12824j,-0.12133+0.14493j,0.25503+0.94179j,0.43844+0.60424j,0.47002-0.13536j,-0.0042528-0.0010993j,0.18445-0.89023j,0.33721-0.66564j,0.023628+0.16717j,0.13371+0.10415j,0.13074-0.35954j]])
            case 14:
                init_pole=np.array([[-0.050963+0.090948j,-0.017346-0.21837j,-0.23694+0.21556j,0.25368-0.056273j,0.12712+0.13887j,-0.023508+0.021251j,-0.13+0.55176j,-0.20737-0.046634j,-0.054021-0.13504j,0.0051435+0.011771j,0.36406-0.32079j,0.10394+0.095362j,0.50309+0.47379j,0.46435-0.15285j,0.11222-0.0071558j,0.16453+0.61698j,0.49165-0.08312j,0.39297+0.16578j,0.14595+0.25128j,0.59956+0.20405j,0.2627-0.94182j,0.32625-0.57572j,-0.34158-0.32837j,-0.30148+0.36781j,-0.52271+0.80479j,-0.77336+0.19573j,-0.90891-0.077402j,0.24029+0.16817j,-0.42596-0.26964j,-0.21653-0.1822j],[-0.44964+0.13601j,-0.92093-0.057276j,0.71072-0.47986j,-0.60801-0.6335j,-0.55894-0.51377j,0.64136-0.035523j,-0.10231-0.36224j,0.27669+0.74226j,0.46477+0.15248j,0.17899+0.052804j,0.44823-0.70832j,-0.61925+0.39073j,-0.031014-0.015095j,-0.038961+0.97061j,-0.43612+0.6018j,-0.2998-0.513j,-0.40729-0.39569j,-0.053402+0.054412j,0.06588+0.55746j,0.759-0.53875j,-0.065352+0.067003j,0.014521-0.6026j,-0.28025+0.21995j,0.56914+0.35546j,-0.084951-0.02682j,-0.36076-0.46783j,0.039829-0.092956j,-0.050253+0.01166j,0.29551+0.70928j,0.21346+0.07225j]])
                init_vel=np.array([[0.40627+0.40793j,-0.22342-0.447j,0.097486-0.11276j,0.50581+0.56277j,0.086167+0.28062j,0.0027275-0.37508j,0.84178+0.0012221j,-0.14325+0.94939j,-0.090652-0.066958j,-0.1028+0.46969j,0.73857-0.5104j,-0.77088-0.025644j,-0.050371-0.25758j,-0.11907-0.060604j,-0.34023+0.18006j,0.64633+0.092516j,0.26642-0.13796j,-0.61544+0.68239j,0.25699+0.36022j,-0.55947+0.76194j,0.18723-0.86231j,-0.33344+0.074977j,0.25911-0.22444j,0.231-0.3897j,0.59602-0.060436j,-0.00062436+0.64942j,-0.067228-0.4887j,0.52106-0.71881j,0.069926+0.069177j,0.43756+0.62637j],[-0.55497+0.63368j,-0.31191+0.30896j,-0.0073725+0.027302j,-0.37186-0.70392j,0.078078-0.084714j,-0.7248+0.40215j,0.39283+0.53687j,0.65601-0.67759j,-0.2804+0.58451j,-0.061102+0.026297j,0.44319-0.22544j,-0.041985-0.043369j,0.64373+0.097455j,0.61145+0.18405j,-0.75002+0.15417j,0.35004+0.15167j,-0.33234-0.07241j,-0.29946+0.34424j,0.26787+0.36679j,-0.11268+0.18792j,-0.019806+0.0016541j,0.51997+0.56252j,-0.28246-0.55058j,-0.0056334-0.0084583j,0.59672-0.076184j,-0.24299-0.24169j,-0.70173+0.0080676j,0.019972+0.051308j,0.64968+0.011392j,-0.96529-0.21043j]])
            case 15:
                init_pole=np.array([[0.27533-0.43004j,0.0015319+0.0032085j,-0.43814-0.095089j,0.68807+0.4533j,-0.96815-0.070255j,-0.23543+0.032061j,0.39859-0.24201j,0.62169+0.44627j,-0.47553-0.139j,0.051078-0.292j,-0.024197+0.064595j,0.70369+0.40333j,0.7503+0.65871j,0.95601+0.068761j,0.0087328+0.3117j,-0.001591+0.0017278j,-0.24297+0.032472j,0.054685-0.086954j,-0.36016+0.12515j,0.28213-0.031161j,0.17122+0.167j,-0.0008706+0.0075858j,-0.10813-0.22424j,-0.02358+0.10095j,0.50391-0.72563j,-0.691+0.32276j,-0.59125+0.39386j,0.50707-0.15979j,0.37887-0.32689j,-0.62495-0.081009j],[-0.37784+0.075j,-0.54119-0.6097j,-0.24209+0.031179j,0.62414-0.58024j,-0.36552-0.75769j,-0.35049+0.73863j,-0.39147-0.86728j,-0.57315-0.039781j,-0.062289-0.15388j,-0.44971+0.33085j,0.15466+0.06242j,0.67623-0.21786j,0.98445+0.076918j,-0.3318-0.41388j,0.30985+0.83984j,0.63944+0.031335j,-0.022898+0.059894j,-0.037746+0.48224j,-0.48084+0.74508j,-0.033754-0.034381j,-0.025642-0.01409j,-0.58074-0.18966j,0.61292+0.22367j,0.47349+0.25028j,-0.52839+0.40616j,-0.69775+0.40547j,0.65733-0.20536j,-0.49534+0.7191j,0.10754+0.41919j,0.81465-0.55018j],[-0.29814-0.08707j,0.62121-0.14725j,0.21766-0.77334j,0.46711+0.011371j,-0.071941-0.031534j,-0.32594-0.24179j,0.91146-0.31698j,0.70526+0.5844j,0.19587+0.26059j,0.054163-0.040243j,0.18062+0.93006j,0.96512+0.099623j,0.03161+0.14672j,-0.073665-0.0078943j,0.70236+0.45114j,-0.64168-0.48306j,-0.0091837-0.26299j,-0.41721-0.037424j,0.22343-0.3563j,0.091724+0.19905j,-0.33266+0.61853j,0.17256+0.36981j,0.31297+0.068013j,0.13373-0.096428j,0.41206+0.74086j,-0.084206-0.62733j,0.27311-0.16858j,-0.013645+0.052805j,0.61538+0.66259j,-0.47885+0.3364j]])
                init_vel=np.array([[0.20026+0.080315j,-0.059827-0.5999j,0.16176-0.7755j,0.18389+0.087885j,0.15438+0.063429j,-0.43601-0.82142j,0.64909+0.20543j,0.091952-0.39516j,0.37129-0.80961j,-0.15883+0.28519j,-0.49571+0.74738j,-0.047142-0.099485j,-0.21572+0.012057j,0.85606+0.38063j,0.068973-0.35288j,0.034186-0.82631j,0.24426-0.032947j,-0.65868+0.032885j,0.38606-0.062686j,0.42866+0.57388j,0.87224+0.45422j,0.24234-0.76342j,-0.074695-0.10286j,0.15174-0.22886j,0.31554+0.20957j,0.13148-0.61715j,0.48665+0.10885j,-0.601+0.072485j,-0.53195-0.38212j,0.076594-0.13156j],[-0.060615+0.050256j,0.29942+0.22988j,-0.32661-0.067418j,-0.67448-0.68133j,0.30389+0.32203j,0.32734-0.41598j,-0.36042+0.84994j,-0.076093+0.30307j,-0.4056-0.27613j,-0.46738+0.28969j,-0.65754+0.1574j,-0.25429-0.11535j,-0.027362+0.020287j,-0.22219+0.139j,-0.003528-0.026606j,0.14323-0.21577j,0.50549+0.4255j,-0.0006611+0.012987j,-0.0049447-0.033138j,-0.25802-0.88447j,-0.7593+0.47626j,0.50253-0.23552j,-0.28417-0.58972j,-0.22912+0.80832j,0.079472-0.25612j,-0.22522-0.22219j,-0.61213+0.41333j,0.42229-0.39239j,0.86633+0.14406j,0.065356+0.18115j],[-0.28814+0.88745j,0.17576-0.64128j,-0.014589+0.69251j,0.70329+0.10995j,-0.60276+0.19328j,-0.62644+0.0061191j,-0.096208-0.11875j,-0.69384+0.009295j,-0.78481-0.18282j,0.10613-0.37402j,-0.55877+0.61157j,-0.44424-0.62603j,-0.43219+0.061554j,0.55904-0.10995j,0.04913-0.498j,0.0057958-0.045517j,-0.26164+0.20013j,0.69879+0.16529j,0.24283+0.32539j,-0.72151+0.66911j,0.53919+0.67729j,0.41869+0.012419j,-0.019665+0.86374j,0.06975+0.011885j,-0.036723-0.14845j,0.43766-0.85344j,2.6548e-05+0.012756j,-0.1547+0.79242j,0.50628+0.74697j,0.38013-0.69364j]])
            case 16:
                init_pole=np.array([[-0.23902-0.23909j,0.16394+0.71578j,0.02705+0.28851j,-0.32412+0.90878j,0.67487-0.24118j,0.41523+0.62879j,0.45851+0.27455j,-0.051498+0.59827j,-0.89963+0.025217j,-0.083297-0.1276j,-0.38306-0.3703j,-0.7511+0.46175j,0.39816+0.45442j,-0.49619+0.0013782j,0.55554+0.76274j,0.87634-0.30963j,-0.11157-0.23483j,0.0079277-0.56247j,0.31671+0.81307j,-0.38537+0.753j,-0.47061-0.22972j,-0.63578-0.13182j,-0.60701-0.17566j,0.15364-0.39823j,0.11872-0.24271j,0.43695+0.078053j,0.020878-0.025057j,0.84738-0.48387j,0.33589-0.18454j,0.099179-0.90362j],[-0.61149-0.27655j,0.49933+0.01211j,0.012148+0.37636j,0.19786-0.3846j,-0.3921+0.32108j,-0.59053-0.59176j,-0.42684-0.084708j,0.08948+0.93317j,0.3169+0.4501j,-0.22843-0.095376j,-0.075395-0.34654j,-0.47572+0.55909j,0.52352-0.37006j,0.065041-0.30358j,-0.14053-0.40315j,0.69924-0.60552j,0.77851-0.11433j,0.31873-0.6061j,-0.84974+0.40875j,0.60267+0.68102j,0.16973-0.62781j,0.68123-0.34332j,0.22622-0.16193j,-0.3212+0.54386j,-0.23197+0.32685j,0.086854-0.025015j,0.39866-0.16047j,-0.021955+0.52188j,-0.27365+0.84106j,0.77012+0.45514j],[0.041279-0.032222j,0.68999-0.64322j,-0.072004-0.088066j,0.062969-0.056443j,0.10397-0.31118j,-0.079939-0.24079j,0.1206-0.10161j,0.057544-0.091108j,0.051515+0.42424j,-0.11623+0.43201j,-0.14835+0.75875j,0.079647-0.39855j,-0.031417+0.12353j,-0.25597-0.51887j,0.022827+0.024008j,-0.35672-0.03373j,0.3607+0.36279j,0.018128-0.090601j,0.096196+0.008762j,-0.010797+0.0034695j,-0.3372+0.1861j,0.46378-0.34106j,0.7957+0.26867j,0.1113+0.826j,0.28073+0.4779j,-0.31571-0.67411j,-0.015824-0.033735j,0.68465-0.59889j,0.22838+0.11347j,-0.053016-0.39497j]])
                init_vel=np.array([[-0.42797-0.13208j,0.0045034-0.53143j,0.39923+0.24873j,-0.28643-0.33734j,0.86542-0.39275j,0.28898+0.47355j,0.046168+0.75092j,0.050869-0.12056j,0.019517+0.021317j,-0.18148-0.58138j,0.13878+0.26726j,-0.15767+0.71569j,0.74944-0.30674j,0.5837+0.026996j,-0.55623+0.61431j,0.0023157+0.96948j,-0.26195-0.31695j,0.39274-0.58593j,0.1224+0.2697j,-0.064707-0.20596j,-0.55555-0.39219j,0.087092+0.054839j,-0.59729+0.18485j,-0.061998-0.54175j,-0.043954-0.011349j,0.23552+0.21117j,0.58331-0.060703j,0.26489-0.59466j,0.036041-0.53387j,0.098158+0.42946j],[-0.51493+0.39871j,-0.62756-0.088713j,-0.0047427+0.88631j,-0.16625-0.63825j,0.58094+0.38019j,0.86417-0.16229j,0.80902+0.38253j,0.16761+0.08768j,0.0049553+0.0076145j,0.78657+0.47511j,-0.28775-0.40348j,0.056609-0.10212j,0.74523+0.0015269j,0.36796+0.29072j,0.044758+0.68448j,-0.13942+0.11973j,0.055284-0.22994j,-0.010806-0.18022j,0.42421+0.18496j,0.00077078+0.00065095j,0.19626-0.47608j,-0.11699-0.98999j,0.3552+0.16902j,0.49272+0.12813j,0.80656-0.24078j,-0.4754-0.62269j,0.0080952+0.778j,0.32038-0.5823j,0.34309-0.20259j,-0.12711-0.03872j],[-0.13604+0.10111j,-0.014071+0.00084682j,-0.10789+0.036896j,0.29446-0.013664j,0.19806-0.059517j,-0.4574-0.31935j,-0.26035+0.80057j,-0.093765+0.12171j,0.55155+0.22703j,-0.54478-0.49127j,-0.25815+0.0021145j,0.31068-0.67828j,-0.21427-0.2603j,0.068346+0.054259j,-0.15184+0.22002j,-0.26378+0.14278j,-0.02444+0.19352j,0.24035-0.46375j,-0.7116-0.59133j,0.74719+0.51346j,0.20607-0.47968j,0.29544-0.2039j,0.0004197+0.0076509j,-0.21954+0.11269j,0.01232+0.04665j,0.7554+0.61232j,-0.57117-0.45089j,-0.93655+0.064601j,0.54482-0.39076j,0.095027-0.4288j]])
            case 17:
                init_pole=np.array([[-0.19423+0.0091451j,0.58296-0.018667j,0.035084-0.29606j,0.18091+0.19971j,-0.012667-0.017124j,0.2033-0.25249j,-0.14045-0.91928j,0.35786+0.65361j,0.4609-0.84961j,-0.71859+0.33162j,0.12495+0.13416j,0.8131+0.15028j,-0.64759-0.064004j,0.10142-0.36017j,0.0026333+0.0024625j,0.55389-0.20919j,0.10991+0.055746j,-0.068166-0.42927j,0.018889-0.073861j,0.057414-0.11892j,0.039836-0.17832j,-0.014807-0.13393j,0.092399+0.52405j,0.081989-0.66405j,0.044715-0.86198j,0.036098-0.15248j,0.81715+0.0067487j,-0.34485+0.49748j,0.48581+0.75575j,0.075178-0.27542j],[0.73153-0.15069j,-0.26009+0.015414j,-0.69957+0.59306j,0.040759-0.76188j,0.2617-0.84017j,0.55271-0.377j,-0.15025+0.23859j,-0.24541-0.40918j,-0.03408+0.31117j,-0.36112+0.055673j,0.072949+0.024392j,0.19733+0.22724j,-0.78829-0.21609j,-0.18985-0.0022273j,0.21406-0.18494j,-0.21028-0.24818j,0.30303+0.67059j,0.51356+0.6549j,-0.50936-0.2252j,-0.23651+0.65847j,-0.10119-0.002376j,0.1684+0.27655j,0.21429+0.12421j,0.22594-0.49892j,0.36944-0.091904j,-0.051379+0.027176j,0.37494-0.044334j,-0.3164-0.11956j,-0.43187-0.73294j,-0.45297+0.63493j],[-0.47023+0.070964j,-0.084802-0.0018404j,-0.45037+0.1362j,-0.70821-0.30772j,0.14735+0.78445j,-0.077321+0.28603j,-0.023986+0.16717j,-0.63694-0.14595j,0.034207+0.068358j,0.12843-0.57083j,-0.10693-0.11035j,-0.13104-0.36083j,0.27528-0.71511j,-0.10768+0.63747j,0.62751-0.11852j,0.83303+0.533j,0.15352+0.030977j,-0.23644-0.27135j,-0.19661+0.19074j,-0.20515+0.44047j,-0.013917+0.2011j,0.83604-0.45229j,0.39122+0.19533j,-0.036617-0.60795j,-0.73235+0.15683j,0.3187-0.11762j,-0.87953-0.41519j,-0.28557+0.88295j,-0.10316-0.23516j,-0.00032935+0.7014j]])
                init_vel=np.array([[-0.21552+0.2694j,0.75542+0.031396j,-0.67126-0.36906j,-0.58804-0.095263j,-0.098389-0.86382j,-0.046382+0.78211j,0.054455-0.22303j,0.021432-0.0041682j,0.19605+0.057162j,-0.0032646-0.0060817j,0.50808+0.7523j,0.19627+0.48042j,-0.90165-0.31142j,-0.053617+0.040749j,-0.11844-0.062787j,-0.058732-0.52147j,-0.077652-0.40247j,0.42588+0.13257j,-0.10128+0.42089j,0.14605-0.39297j,0.62259+0.28493j,-0.70497+0.36319j,0.44748+0.65014j,-0.33477-0.53458j,0.35535-0.50284j,0.24371+0.10963j,0.21812+0.51183j,-0.41085+0.58869j,0.077509+0.87229j,0.1129+0.17498j],[-0.099592-0.31318j,-0.23603-0.16545j,0.71429-0.45361j,-0.0041414+0.068411j,0.21244+0.35559j,-0.23711-0.072287j,0.0047196-0.0050509j,0.16633+0.35618j,0.038902+0.66114j,0.61686-0.42028j,-0.97447-0.014496j,-0.36947+0.73426j,0.59307+0.7382j,-0.38765-0.20289j,0.12256-0.055618j,0.92811-0.17389j,-0.12079+0.35098j,-0.20008+0.17561j,0.10567-0.23715j,0.12658-0.4908j,0.41696+0.14991j,0.67606-0.45616j,-0.48552-0.12466j,-0.077297+0.060225j,0.28697-0.1032j,0.016465+0.035912j,-0.24953+0.9364j,-0.23218+0.50853j,0.38714+0.068198j,0.24603-0.71619j],[0.71752+0.5877j,-0.32745-0.51013j,-0.5922-0.68034j,0.20687+0.068903j,-0.12552+0.64919j,-0.53589-0.14216j,0.17916-0.74541j,0.22891-0.10667j,0.91333+0.050868j,-0.71831-0.35143j,-0.10917-0.049485j,-0.13491-0.62257j,-0.70613+0.66008j,0.31846+0.039015j,0.63097+0.50143j,-0.76592-0.62464j,-0.21938+0.057765j,-0.29644+0.35056j,-0.12731+0.040898j,-0.066682+0.3174j,-0.28289-0.33132j,-0.65289+0.37338j,0.51237-0.21378j,-0.013871+0.24528j,-0.5491+0.53547j,-0.2636-0.13588j,-0.66923+0.16439j,-0.51653+0.13292j,-0.24919-0.38436j,-0.45896+0.29704j]])
            case 18:
                init_pole=np.array([[-0.10794+0.30909j,-0.13479+0.73408j,0.033622-0.11263j,-0.58943+0.21498j,-0.41301-0.29934j,0.70062+0.13914j,0.20496-0.07584j,-0.20266+0.061672j,0.77492-0.37134j,-0.33184+0.34316j,-0.060328+0.024403j,-0.60591+0.13516j,-0.14062+0.182j,0.11028-0.084593j,-0.0043644-0.96976j,-0.95085+0.28772j,-0.071048-0.11733j,0.49124-0.2743j,-0.19905-0.5037j,-0.1561+0.031916j,0.047283-0.12853j,0.16994+0.43269j,0.65669+0.24492j,0.38088+0.70768j,0.53903+0.10113j,-0.34099-0.70661j,0.049937+0.56884j,0.33642+0.63788j,0.18776-0.56445j,0.07195-0.443j],[-0.58239-0.46622j,0.0533-0.16559j,0.16685-0.049513j,-0.81118+0.2253j,0.091114-0.13848j,0.34832+0.83749j,0.82475-0.27993j,0.31206-0.77629j,-0.24427-0.46288j,-0.73818+0.49697j,-0.22082-0.45911j,0.70217-0.21233j,-0.011606+0.018539j,-0.73836-0.2167j,0.27372+0.27329j,0.29105+0.14772j,-0.11047-0.36855j,-0.33938-0.53532j,0.19106-0.25043j,-0.14745+0.039365j,0.32132-0.63291j,0.1118+0.018193j,0.11215+0.14077j,-0.36149-0.36535j,-0.20471+0.03595j,0.39539+0.34765j,-0.10259+0.40938j,-0.032673+0.065434j,-0.26448+0.8204j,-0.61703-0.21243j]])
                init_vel=np.array([[0.52262+0.18587j,-0.65552-0.41084j,0.043809+0.13104j,0.035719-0.18602j,0.078626+0.10023j,-0.10451+0.074433j,-0.072459-0.26345j,0.63555+0.057601j,-0.3086-0.19876j,0.16776-0.083337j,-0.18087+0.17992j,0.011875+0.010037j,-0.64433-0.71509j,-0.0054154-0.0058071j,-0.14575+0.3284j,-0.37154-0.39299j,-0.23766-0.45925j,-0.051088+0.14039j,-0.015747-0.0569j,-0.29025+0.66149j,-0.37494+0.55187j,0.38463-0.45862j,0.31018-0.30694j,0.1068+0.2026j,0.49499-0.12846j,0.24476-0.24471j,-0.24981-0.32966j,-0.24796-0.30106j,-0.57857+0.58856j,0.40453+0.71533j],[-0.045943+0.7292j,-0.89355+0.1144j,0.054776+0.79219j,-0.021454-0.019475j,-0.028244-0.13072j,-0.90926+0.21899j,-0.76684+0.54828j,0.77832+0.39436j,-0.22274+0.07861j,0.4515+0.3064j,-0.29314-0.087164j,0.48478-0.33185j,0.70413-0.47587j,0.63149+0.056606j,0.087024+0.073732j,0.38649+0.15502j,-0.87723+0.12519j,-0.43239-0.04453j,0.14827-0.351j,-0.035738+0.08815j,-0.14878-0.25635j,0.011228-0.15144j,0.0087531-0.0091773j,0.15529-0.2131j,0.027235-0.21335j,0.68173+0.30737j,-0.025029+0.049819j,0.34538-0.32535j,0.031874-0.30197j,-0.56134-0.069928j]])
            case 19:
                init_pole=np.array([[-0.3127+0.54398j,0.26234-0.026593j,0.02392-0.090052j,0.63371-0.44954j,0.10267-0.088292j,-0.24901+0.041127j,0.4085-0.37112j,-0.22157+0.43388j,0.17342+0.12485j,-0.25351+0.86456j,0.13325-0.52105j,0.28574-0.80835j,0.061275+0.0035577j,-0.10361+0.27204j,-0.24167-0.031265j,0.62977-0.0072672j,0.24806+0.24459j,0.48788+0.5077j,0.27612+0.04801j,-0.11631+0.11803j,-0.37772+0.34466j,0.15693-0.98056j,0.46422-0.63349j,0.29807-0.0058422j,-0.085142-0.14323j,0.78993-0.26149j,-0.5287+0.468j,-0.61479-0.26473j,-0.10103-0.10044j,0.47423+0.24043j],[-0.61085+0.36951j,0.85638+0.32507j,-0.52096-0.35016j,0.72068+0.47747j,-0.42053-0.6396j,0.12632+0.15515j,-0.37301+0.15468j,-0.25921+0.28437j,0.5191-0.16227j,0.053701+0.016874j,0.11475-0.069312j,-0.18287-0.075962j,-0.65405+0.096086j,0.9529-0.20078j,0.10439+0.67408j,0.5793+0.63157j,0.18966+0.4478j,0.40202+0.22538j,0.075874-0.0070858j,-0.10707-0.38411j,-0.32093-0.85596j,-0.080821-0.052607j,0.091487+0.59541j,-0.026031+0.1306j,-0.27278+0.1617j,0.92986-0.28171j,0.037783+0.009722j,-0.022835+0.029369j,-0.61357-0.60603j,-0.14161+0.50265j],[-0.26309+0.15705j,-0.4896+0.37223j,-0.0702+0.17874j,-0.14018+0.3027j,-0.12742-0.29202j,0.065755-0.020943j,0.38166-0.64576j,0.017073-0.058987j,0.41063+0.0038029j,-0.41511+0.15614j,-0.52918-0.11221j,0.00085692-0.15561j,-3.8516e-05+0.018603j,0.19572+0.73917j,-0.12575-0.056491j,0.86356-0.25279j,-0.41139-0.54083j,-0.19668-0.30661j,-0.43112-0.10876j,0.87079-0.29868j,-0.073667-0.055001j,-0.22306+0.21978j,0.13548-0.44578j,-0.072682-0.28592j,-0.10983+0.001194j,-0.023375-0.21702j,-0.5345-0.30681j,0.0024337-0.0022796j,-0.078246+0.26472j,0.054341+0.56501j]])
                init_vel=np.array([[-0.24848-0.24062j,-0.020533-0.15652j,0.14727-0.066036j,0.080638+0.7781j,0.10029-0.15331j,0.078147+0.26868j,-0.093296+0.36777j,0.19601-0.060852j,-0.19327-0.052337j,-0.12323+0.53063j,-0.079454-0.018981j,0.27258+0.33898j,0.013157-0.031587j,0.24542-0.54025j,0.034226+0.044669j,0.1919+0.35053j,0.28187-0.088449j,-0.51997+0.35612j,-0.60079+0.72861j,-0.56598+0.72476j,0.61727-0.68127j,0.35308-0.24021j,-0.11477-0.18561j,-0.39906-0.6758j,-0.40416-0.15141j,0.31714-0.83161j,0.89203+0.050412j,-0.27147-0.42549j,0.28717+0.053202j,0.33764+0.17503j],[0.28524-0.79911j,-0.30262-0.40885j,0.52231+0.36193j,0.25913+0.053371j,-0.41918-0.15658j,-0.67418-0.64317j,0.58884+0.068768j,-0.0045042-0.7236j,-0.16878+0.82642j,0.51387-0.1212j,0.12945+0.44567j,-0.39591+0.39302j,0.5841-0.40347j,-0.15707-0.58743j,0.089331+0.85004j,0.030509+0.32398j,-0.20896+0.30063j,-0.21419+0.62897j,0.24789+0.24758j,-0.18809+0.21901j,-0.086916+0.023545j,-0.1143+0.5663j,0.29869+0.91975j,-0.50765-0.13477j,0.71142+0.09623j,-0.011826-0.13419j,-0.1293-0.64016j,0.01803-0.89427j,0.04359-0.22994j,-0.0060609+0.59476j],[0.12735+0.097467j,-0.59567+0.09567j,-0.68554-0.49222j,-0.27591-0.15136j,0.17484-0.27595j,0.18364+0.35501j,-0.020556-0.06535j,0.024304-0.57463j,0.013643+0.42351j,0.022398+0.18375j,-0.027968+0.012303j,0.17266-0.61501j,-0.1639-0.042496j,0.74407+0.20712j,0.0079648+0.3842j,-0.088471+0.5483j,-0.10226+0.33373j,0.045558-0.99105j,-0.14301-0.12961j,0.50064+0.2298j,0.22766+0.12075j,-0.67892-0.59009j,0.42034-0.10796j,0.22521-0.24295j,-0.91079+0.099507j,-0.10775-0.052622j,-0.038262+0.012585j,0.13007-0.36314j,-0.18322-0.082521j,0.17943+0.19959j]])
            case 20:
                init_pole=np.array([[-0.48902+0.28193j,0.96259+0.22455j,0.24502+0.17423j,0.24807+0.063299j,0.42217+0.81661j,-0.35001+0.082722j,-0.21299-0.15058j,-0.69298+0.21106j,0.37046-0.0036655j,0.62513+0.10686j,0.71198+0.5106j,-0.43823+0.14089j,0.21671+0.081643j,-0.55859-0.22883j,0.30623-0.59422j,-0.47514-0.25451j,-0.53289+0.16844j,0.0062311+0.0077928j,-0.46479-0.62574j,-0.87666-0.46615j,0.030897+0.23019j,-0.80818+0.29346j,-0.68804+0.6032j,-0.51127+0.37132j,0.0055523+0.047209j,0.46865-0.38634j,-0.027964-0.0012777j,-0.071189-0.051342j,-0.14116-0.20225j,-0.042022+0.52019j],[-0.10235+0.53121j,0.23126+0.097817j,0.020242+0.036845j,-0.10353-0.39538j,0.11212+0.046153j,0.21075+0.68774j,0.48793+0.07105j,0.18602+0.070996j,0.57561-0.64202j,-0.062192+0.1269j,-0.3793-0.18137j,-0.45522-0.24228j,-0.28311+0.85382j,0.019371+0.36472j,-0.84081+0.30542j,0.041866+0.4264j,4.3751e-05+0.22585j,-0.058969-0.0046646j,-0.2521-0.22134j,0.54998-0.34269j,-0.65605+0.34197j,-0.41546-0.4288j,0.30331-0.30928j,-0.29359-0.03283j,0.73148+0.67393j,0.34001+0.072396j,0.050494+0.043797j,0.28041+0.17849j,-0.52679+0.13127j,0.41768-0.83311j],[-0.056238-0.039843j,-0.13947+0.28297j,-0.36418+0.38217j,-0.59779-0.73514j,-0.49303+0.3276j,0.35731-0.38266j,0.69057-0.50554j,0.12351+0.09739j,-0.51306-0.45351j,-0.077257+0.017894j,-0.22378+0.43329j,0.24247+0.12325j,-0.90025-0.12363j,0.51081-0.31206j,0.086781-0.0098223j,0.22932-0.57297j,0.10045-0.028884j,0.31765-0.056621j,-0.60834+0.11743j,-0.38459+0.37874j,-0.13132+0.87924j,-0.6393-0.14139j,-0.090145+0.27538j,0.57568+0.2356j,0.1682+0.12025j,0.3809-0.60833j,-0.92539+0.05562j,0.52126-0.071769j,0.51181-0.58975j,-0.07004+0.12937j]])
                init_vel=np.array([[0.91634+0.21531j,0.21394+0.46387j,-0.25304+0.72828j,0.0052687-0.043758j,0.35657+0.14297j,-0.026018-0.40509j,0.2181+0.25557j,-0.37451-0.05796j,-0.29574-0.56049j,-0.055009-0.89457j,-0.62101+0.7451j,0.37559+0.77116j,0.31682+0.080913j,-0.04747-0.020987j,-0.24016-0.14388j,0.75447+0.24994j,-0.59377-0.63955j,-0.091736-0.21297j,-0.51491-0.81822j,0.027992-0.012286j,-0.051546-0.84627j,-0.89279-0.21823j,0.1388-0.059728j,0.62427+0.4642j,-0.070872+0.69831j,0.26987-0.2148j,-0.00060654+0.0013871j,0.53722-0.12169j,-0.47574+0.8156j,-0.18281-0.90799j],[-0.23705-0.058282j,-0.50504+0.25237j,0.059038-0.3082j,-0.52234-0.62293j,0.23523+0.46725j,0.47276-0.37654j,-0.12868+0.066496j,0.0076104-0.27021j,-0.58758-0.54249j,0.7447-0.038705j,0.2044+0.52661j,0.85906-0.071147j,0.28122-0.79154j,0.020102-0.77776j,0.12134+0.31065j,0.036312+0.013356j,0.22247-0.17943j,-0.20794-0.58616j,-0.60519-0.076208j,0.018982+0.85736j,-0.013215+0.50444j,0.34696-0.21977j,0.7326-0.35764j,-0.50735+0.56199j,0.083054+0.55933j,-0.67439+0.20285j,0.5616-0.021122j,-0.34878-0.60061j,-0.89403-0.1288j,0.020481-0.11514j],[-0.07672-0.95403j,0.8106+0.5748j,-0.056319-0.013319j,0.32264-0.25633j,-0.77168+0.4477j,0.093556+0.015332j,0.022382-0.24386j,0.1041+0.1888j,0.20832+0.0089665j,0.37163+0.38679j,-0.048291-0.21227j,0.31152+0.0334j,0.31346-0.37991j,-0.42347-0.052185j,-0.36685-0.0079339j,-0.37068+0.62502j,-0.30408-0.58222j,0.023139-0.071471j,-0.18851+0.33422j,-0.60205-0.042461j,0.0044706-0.0065265j,-0.4331+0.59058j,-0.77496-0.47624j,-0.065512+0.39987j,0.58472+0.0048525j,-0.14173-0.076094j,0.54369-0.055212j,-0.13842-0.91711j,-0.088329+0.59761j,0.29754+0.16618j]])
            case 21:
                init_pole=np.array([[0.027587+0.21986j,0.72518-0.0064038j,0.00018699+0.20212j,0.30455-0.15205j,0.40248+0.012164j,-0.028337-0.042952j,0.90565-0.21783j,-0.12332+0.54885j,-0.035843+0.066456j,0.10185+0.16553j,-0.24982-0.54195j,0.50849-0.2826j,-0.099125+0.024442j,-0.51043-0.38584j,-0.084505+0.38024j,-0.41868-0.62842j,0.33513+0.81922j,-0.069153+0.089353j,0.078058+0.013966j,0.4248-0.47681j,-0.90963+0.35421j,-0.45358+0.58362j,0.68749+0.091206j,0.18844+0.25663j,-0.26723+0.50666j,-0.40619-0.81123j,0.080099+0.62228j,-0.060091+0.54609j,-0.5638+0.1771j,-0.10615-0.12365j],[-0.12857+0.15834j,-0.83136-0.070797j,-0.30967+0.35235j,-0.063825+0.001816j,-0.57442-0.35314j,-0.30264-0.054417j,-0.14737+0.34812j,0.82693+0.077616j,-0.30378+0.83445j,-0.20788+0.076336j,-0.12956-0.5718j,0.09956-0.0069276j,0.12092-0.082262j,-0.34601-0.1378j,-0.41447-0.68423j,-0.10856+0.27452j,0.16907+0.12395j,-0.12904-0.029493j,-0.1577-0.6068j,0.62745+0.58309j,0.55526-0.54998j,-0.17228-0.18613j,0.68497+0.35894j,0.49876+0.10852j,0.39239-0.8694j,0.5339-0.52989j,-0.29264+0.35857j,-0.50554+0.82727j,-0.1065+0.031185j,0.034334+0.013459j],[0.41465+0.46644j,-0.014395+0.01224j,-0.30481+0.22422j,-0.58909-0.48229j,0.094618-0.54289j,0.44248-0.85808j,0.18008-0.59084j,0.79496+0.53407j,0.55885+0.063553j,0.074228-0.70185j,-0.93773+0.24215j,0.15189-0.068463j,-0.50778+0.4395j,0.092258-0.13422j,-0.32007-0.23956j,-0.3141+0.55763j,-0.10939+0.46774j,0.063896-0.0036844j,0.34043-0.23087j,0.73362-0.21176j,0.6185-0.70198j,0.47412-0.54086j,-0.53402+0.52264j,0.15558-0.75725j,0.079216+0.15219j,0.012862-0.28589j,-0.084474+0.098075j,0.37777+0.22974j,0.19654+0.036258j,0.13259+0.23832j]])
                init_vel=np.array([[-0.5473-0.4114j,0.1864-0.21966j,-0.068827+0.028601j,-0.27091+0.77878j,-0.31369+0.33697j,-0.025074+0.16432j,0.040949-0.15407j,-0.21743+0.18765j,0.076564-0.38003j,0.23716-0.31414j,-0.47765+0.82118j,0.10755+0.021365j,-0.031309-0.063908j,-0.39758-0.55275j,0.24418-0.10309j,-0.0020266+0.014258j,-0.50065-0.37873j,-0.052396+0.13502j,0.31371-0.13137j,0.085859+0.024254j,0.41071-0.64413j,0.32192-0.21969j,0.44204-0.3334j,-0.085929-0.079537j,0.070925+0.17087j,-0.39411-0.76958j,-0.37146-0.11741j,-0.90116-0.083804j,0.83491-0.36122j,-0.28499+0.59684j],[0.22261+0.50793j,0.26522+0.26739j,-0.35015-0.29946j,0.51806+0.14336j,-0.0074197-0.011912j,0.36591-0.0048318j,-0.15435-0.23214j,0.14114-0.28934j,0.89305-0.069299j,-0.6727+0.060976j,0.17309+0.60022j,0.26501-0.49995j,0.043119-0.15247j,0.062111+0.77928j,0.050053+0.8945j,0.055562-0.33951j,0.17996+0.40889j,0.11684+0.9678j,0.60392+0.12261j,-0.46454+0.23705j,-0.66996-0.67021j,0.016318-0.14953j,-0.37183+0.40566j,0.34061+0.20695j,0.18589-0.46501j,0.65737-0.39447j,0.4878+0.047786j,0.47634-0.1466j,0.57054-0.096206j,0.097401-0.45945j],[0.0019548+0.0057105j,-0.089364-0.11608j,-0.029102-0.36925j,0.41839-0.70234j,0.0039513-0.0030364j,0.36308-0.61967j,-0.62081-0.17476j,-0.12836-0.087627j,0.21133-0.86225j,0.17694-0.17973j,-0.20682+0.0073359j,-0.024543+0.27323j,-0.020564-0.045049j,-0.79924+0.11424j,0.15448+0.58803j,-0.26123+0.46536j,0.69169+0.42362j,0.70168-0.45034j,-0.25267-0.16859j,-0.81772-0.11157j,-0.010906+0.33337j,-0.30817-0.12802j,-0.084018+0.13666j,-0.58971+0.58604j,-0.021132-0.12453j,0.24337-0.50918j,0.73452+0.49707j,0.29212-0.4413j,-0.53997+0.55702j,0.051677+0.21361j]])
            case 22:
                init_pole=np.array([[-0.27921+0.91761j,-0.054165+0.34063j,-0.11898+0.79145j,-0.26966-0.49024j,-0.18524+0.6331j,-0.55509+0.44863j,0.013815-0.029694j,0.17822+0.47747j,-0.27963+0.17649j,0.25707-0.12965j,-0.31079-0.19349j,0.57936-0.29654j,0.04871+0.82731j,0.039882-0.020605j,-0.29346+0.40247j,0.035681+0.039453j,0.62836-0.28752j,0.57958+0.75758j,0.81081+0.22853j,-0.16586+0.069624j,0.02524+0.16069j,-0.003572+0.22572j,0.32092-0.12588j,-0.27436-0.38292j,-0.50118+0.47586j,-0.19626-0.26755j,0.29129-0.69167j,0.22839+0.34715j,-0.33745-0.51516j,0.5017+0.52499j],[-0.82505+0.42968j,0.32588-0.61124j,-0.4436-0.39454j,-0.024754+0.03527j,-0.25378-0.54309j,0.19353+0.69818j,0.75518-0.37603j,-0.56428-0.4259j,0.55122-0.72867j,-0.18641+0.19097j,0.12088+0.088836j,0.92299+0.33591j,0.068629+0.48901j,-0.56439-0.0088603j,-0.057626+0.015305j,0.76265+0.36067j,0.50153+0.4091j,-0.061021-0.16609j,0.14739-0.4746j,-0.38785+0.57264j,-0.37382-0.20862j,-0.37671-0.54941j,0.022774+0.014966j,-0.91019-0.02237j,0.0020679-0.017325j,0.29673-0.15787j,0.07823-0.32463j,-0.49621+0.29347j,-0.064132-0.13624j,0.0094985-0.10843j],[-0.35992-0.064948j,0.19033-0.69087j,0.078056+0.057881j,-0.36709-0.66276j,-0.17828+0.14051j,-0.054872-0.33982j,-0.76727-0.06825j,0.25307+0.74961j,-0.52039+0.24856j,-0.28439-0.84353j,-0.80655+0.49499j,-0.14463+0.12905j,-0.36828+0.46194j,0.20799-0.59843j,0.49103-0.15581j,-0.16202-0.57217j,-0.36105-0.50825j,-0.33451-0.3371j,0.75954-0.065973j,0.87176+0.27604j,-0.033645-0.024892j,0.80996+0.32125j,-0.45581+0.78216j,-0.32181-0.063329j,-0.10393+0.50169j,-0.4628+0.83348j,0.44938+0.44557j,-0.36812-0.88608j,0.83681+0.049411j,0.08809-0.13518j]])
                init_vel=np.array([[0.65518+0.3587j,-0.12812+0.18261j,-0.43946-0.28255j,-0.65808+0.31825j,-0.22988+0.0046736j,0.70851+0.226j,-0.067911+0.10964j,0.44882-0.032144j,0.010196+0.89152j,0.022873-0.61766j,-0.032403+0.5454j,0.75702+0.06054j,0.11083-0.17315j,0.27129-0.052104j,0.49634+0.47849j,-0.56395-0.53735j,0.54235+0.69139j,-0.13623-0.24649j,-0.71597-0.46377j,-0.013551+0.028499j,-0.064297+0.51591j,0.51717+0.3527j,-0.64087+0.081844j,0.23459+0.02707j,0.44433-0.48728j,0.43692+0.36679j,-0.1792+0.065096j,-0.62778+0.013997j,0.072777-0.028718j,0.073346-0.0512j],[-0.84914-0.41364j,0.095172-0.5008j,-0.442+0.43106j,-0.05613+0.029483j,0.32686+0.083638j,0.28652-0.29648j,0.21198-0.0349j,0.13165+0.20101j,-0.33338+0.4821j,0.037777+0.24786j,-0.25063+0.36486j,0.26933+0.29496j,0.21584+0.91851j,-0.16229+0.16176j,0.048697-0.7062j,-0.5793+0.036797j,-0.25954-0.29504j,-0.89041+0.16058j,0.055128+0.37465j,-0.0062516-0.92001j,0.69716-0.31811j,0.0084775+0.32679j,0.32082-0.29182j,0.12641-0.96353j,-0.28526-0.15801j,0.0082169+0.035394j,-0.20794+0.39828j,0.13093+0.28617j,-0.14432-0.093463j,-0.37563-0.83743j],[0.45202-0.80097j,-0.20385-0.76091j,-0.43856+0.3454j,0.095609+0.48342j,-0.50652-0.2185j,0.32363-0.39108j,0.28109-0.082094j,0.26322+0.0048271j,0.098087+0.93354j,-0.097204+0.032638j,0.56689-0.396j,-0.43276+0.36698j,0.47093-0.20297j,0.94862-0.090496j,-0.57693-0.31416j,0.092897+0.49458j,0.078472-0.2296j,0.66035-0.24019j,-0.25562-0.57912j,0.46971-0.0054802j,-0.11113-0.31732j,0.28525-0.12417j,0.018833-0.10115j,-0.27434-0.6428j,-0.013919-0.014113j,0.25786+0.059973j,-0.17847+0.74765j,0.26714-0.11802j,0.72127+0.0036646j,0.38424+0.1923j]])
            case 23:
                init_pole=np.array([[-0.26172+0.9614j,-0.092103-0.45217j,0.52994+0.15611j,0.10083-0.11746j,-0.26636+0.37737j,0.76431+0.6009j,0.034006-0.012784j,0.39111-0.49169j,-0.82751+0.33109j,0.12515+0.0082679j,-0.26213-0.14544j,-0.44184+0.32843j,-0.6186+0.74733j,-0.051877+0.026915j,0.34899-0.12322j,-0.29407-0.067448j,0.25516+0.14319j,-0.013217-0.069258j,0.11833+0.54767j,-0.48135-0.54798j,0.05656-0.056673j,-0.59244+0.13266j,-0.28427+0.85521j,-0.13634+0.05622j,0.34397+0.48293j,-0.041389+0.034204j,0.056185-0.04424j,0.3467+0.64786j,0.11615+0.018443j,-0.37308+0.89762j],[0.1208+0.29033j,0.21993+0.5444j,-0.098111-0.14529j,0.098136-0.43451j,0.78411+0.28446j,0.74539+0.028461j,-0.086406-0.16765j,-0.16596-0.32483j,0.24605-0.061062j,0.33277+0.41067j,-0.21018+0.75912j,0.64135+0.74906j,0.049873-0.081989j,0.10965+0.056425j,0.19508-0.25312j,-0.16907+0.58346j,0.1942-0.80945j,0.030044+0.26461j,0.19992-0.029517j,0.91441+0.27543j,-0.90898+0.23252j,0.42971-0.85565j,3.2109e-05+0.00036421j,-0.31468-0.014022j,0.54805-0.36344j,0.021891-0.041781j,0.0084829-0.013182j,0.05879+0.75009j,-0.030544+0.25951j,-0.89475-0.43313j],[-0.034826-0.80847j,-0.43704+0.1926j,0.11381-0.57611j,-0.49136+0.21818j,0.42098-0.90285j,-0.031333+0.19749j,-0.4348+0.38014j,-0.49529-0.39986j,0.12664-0.25684j,-0.81598+0.088478j,-0.40517+0.16376j,0.65962-0.20174j,0.86797+0.23064j,-0.24617+0.5807j,0.36777+0.7056j,0.37858-0.26475j,0.2609+0.50738j,0.045465+0.16472j,-0.36281+0.33286j,0.085713+0.75753j,0.97429+0.018756j,0.22919-0.23834j,0.23701-0.42117j,0.067592+0.15748j,0.3486-0.015891j,0.053547-0.015901j,-0.39631-0.88938j,-0.030514+0.013368j,0.88643-0.11108j,-0.26488-0.22383j]])
                init_vel=np.array([[-0.66437-0.60941j,-0.11576-0.16857j,0.6629+0.1842j,0.21248-0.2342j,0.64146+0.2772j,-0.20071+0.0057802j,0.45801-0.2943j,0.13032+0.30248j,-0.46697-0.18122j,0.25884+0.066885j,-0.072731+0.14128j,-0.49184+0.35943j,0.57275+0.011236j,-0.0752+0.74862j,0.23522-0.69623j,0.080743-0.28774j,-0.27054-0.66558j,0.42907+0.18739j,0.11901+0.90425j,0.45227-0.31757j,0.50661-0.32496j,-0.51564-0.47098j,-0.046759+0.41919j,0.75673-0.34275j,-0.8704+0.34859j,0.52176+0.62069j,0.62075+0.3755j,0.13163+0.20881j,-0.28554+0.35177j,-0.0057017+0.0058631j],[0.35834+0.16865j,0.012429+0.061612j,0.15018+0.25598j,0.082562-0.80528j,-0.29659-0.5597j,-0.23232+0.55122j,-0.80529+0.25977j,0.61074+0.36079j,-0.52401-0.84555j,0.24417+0.40505j,0.22663+0.14369j,-0.54192-0.8008j,-0.26153-0.36647j,-0.091459+0.023208j,-0.32873-0.13294j,-0.10317+0.70618j,-0.79065-0.6046j,0.093799-0.00082902j,0.072299+0.047332j,0.13958+0.67078j,0.068668+0.18625j,-0.38147-0.2565j,-0.52915+0.27438j,-0.12047+0.023202j,-0.22913+0.61384j,0.024245+0.041921j,0.12461-0.061689j,-0.16918-0.82276j,0.3327+0.21248j,0.094977-0.38695j],[0.43251+0.54117j,0.45602+0.42357j,-0.57017-0.039851j,0.24179+0.27409j,-0.95856+0.10761j,-0.037296+0.074935j,-0.00034884-0.040697j,0.22947+0.82914j,0.39775-0.15976j,-0.14884+0.06097j,0.28013-0.70339j,-0.70611-0.31532j,-0.11747+0.26192j,-0.076376-0.074631j,0.5736+0.090125j,0.15943-0.32332j,-0.063458+0.054578j,-0.38454-0.61482j,0.029456+0.51912j,-0.29718+0.038448j,-0.622+0.21083j,-0.079506-0.13614j,0.098303-0.30698j,-0.087017+0.23563j,-0.11784+0.74363j,-0.41441+0.015767j,0.37669+0.50817j,-0.38033-0.74523j,0.9603+0.049811j,-0.46126+0.15862j]])
            case 24:
                init_pole=np.array([[0.098885-0.01212j,-0.34788-0.28916j,-0.14572-0.61259j,-0.76301-0.24616j,0.23234-0.039599j,-0.78552+0.49463j,0.2937+0.43338j,-0.94867-0.27702j,0.53433+0.40414j,0.24909-0.13624j,-0.50187+0.66572j,0.61373-0.38132j,-0.75731+0.5427j,-0.11994+0.425j,-0.013334+0.025222j,0.76651+0.14162j,0.039824+0.12163j,-0.47194+0.48034j,-0.18353-0.58926j,0.0011881+0.83572j,0.76207+0.41048j,0.0042508+0.00062464j,-0.20954-0.31232j,0.23823-0.18253j,-0.14721+0.087861j,-0.37152+0.44655j,0.4191-0.74178j,-0.072703+0.74943j,-0.034801-0.015913j,0.64099-0.048616j],[0.21625+0.77627j,0.0067741+0.53332j,-0.040067+0.64532j,0.038165+0.19283j,-0.098917+0.2536j,0.51912+0.033753j,0.33658-0.01252j,-0.036668+0.4723j,0.35477-0.71211j,-0.70617-0.12559j,-0.13736+0.099595j,0.090047+0.09957j,-0.46521-0.31919j,-0.67377-0.19593j,0.78316+0.53413j,-0.44702-0.88266j,-0.45605-0.087477j,-0.68566-0.54195j,-0.21488+0.17132j,-0.05474-0.38198j,-0.14033+0.41214j,0.29215+0.58344j,0.27386-0.3461j,0.12247+0.46238j,0.038868+0.30106j,-0.70118-0.0067147j,-0.092777+0.072461j,0.18291-0.67789j,0.18054-0.074089j,0.016851-0.21675j],[0.65581-0.069261j,-0.52332-0.059299j,0.14414+0.12658j,-0.15662+0.38031j,0.0081788-0.0028723j,-0.17104+0.43146j,-0.31627+0.10224j,0.55253-0.5025j,-0.24451+0.1204j,0.1271-0.13393j,-0.77845-0.5502j,0.82333+0.22339j,0.3491-0.19284j,0.051424-0.25491j,-0.93004+0.3569j,0.37254+0.31452j,-0.51726-0.53281j,0.43166-0.62339j,-0.30266-0.14679j,-0.044461+0.066924j,-0.05359+0.16352j,0.23729-0.28349j,-0.067712+0.51166j,0.0060892-0.0013946j,0.31006-0.67682j,-0.011759-0.80458j,0.53978+0.37501j,0.55812-0.23381j,-0.27085-0.18972j,0.030271+0.070702j]])
                init_vel=np.array([[-0.2045+0.47458j,-0.16875+0.5759j,0.078053+0.2828j,-0.073677+0.2159j,-0.15107-0.28864j,-0.066078-0.22088j,-0.52886+0.21949j,0.55855-0.013931j,0.48039+0.67988j,-0.058286+0.27349j,-0.022178-0.18782j,0.46905-0.62139j,0.91169-0.085859j,-0.84909+0.12548j,0.56379+0.59082j,-0.27269+0.21531j,-0.62745+0.53473j,-0.91846-0.11832j,-0.49656+0.23285j,0.79315+0.44313j,-0.44447-0.38684j,0.11324+0.59556j,-0.16501-0.53528j,-0.22897-0.36627j,0.067516-0.0041152j,0.13771+0.20389j,0.23321+0.04411j,-0.81742+0.014432j,-0.29077-0.88949j,0.26683-0.93215j],[0.48208-0.42118j,0.83409-0.55103j,0.47062+0.077024j,0.17578-0.043443j,0.42664-0.66559j,-0.68202+0.080563j,0.63332-0.76581j,-0.14622+0.91568j,-0.17369+0.02239j,0.18076-0.83002j,0.020769+0.97834j,-0.31473-0.74721j,-0.09859-0.021857j,0.014343-0.011915j,-0.0068309-0.11602j,-0.62077-0.46212j,0.16218+0.060405j,0.16968+0.08792j,-0.0051346-0.0080141j,-0.6908+0.14228j,0.76165-0.54901j,0.070578+0.78923j,0.00050222-0.00048057j,-0.39999+0.1596j,0.32776-0.090072j,-0.63125+0.36228j,0.093476-0.10376j,0.095702+0.36592j,-0.41358+0.10412j,0.27876-0.23508j],[-0.24528+0.83361j,-0.12905+0.0057732j,0.062278+0.11364j,0.14106-0.65704j,-0.47988+0.26047j,0.021059-0.044335j,0.3624+0.02028j,0.25414+0.054324j,0.67383-0.56575j,0.38689+0.70789j,0.22091+0.1248j,0.4808-0.12955j,0.11281-0.075651j,0.72017+0.10873j,-0.37843+0.309j,0.28208+0.042654j,-0.32009-0.80213j,-0.041868+0.027972j,0.16344+0.81208j,-0.032511-0.24115j,-0.015638+0.89537j,0.30845-0.7772j,-0.060942-0.24377j,-0.80799-0.33643j,-0.091867+0.15137j,-0.27149-0.096734j,0.17391-0.13593j,-0.11814-0.65495j,0.28956+0.53139j,0.41539+0.51859j]])
            case 25:
                init_pole=np.array([[-0.70151-0.6252j,0.0064588+0.0091106j,0.22123-0.65797j,0.091694-0.016874j,0.074921-0.31612j,-0.60939-0.27601j,-0.3448+0.56937j,0.14335-0.48192j,-0.4543+0.31927j,-0.2855+0.5153j,0.12715-0.51834j,-0.027817-0.43009j,-0.26486+0.0090985j,0.023826+0.026365j,-0.2256-0.049119j,0.35198-0.038438j,-0.59512+0.014172j,0.66496-0.16531j,-0.31373-0.5816j,0.7816+0.29932j,0.16172+0.29623j,-0.084635+0.11348j,-0.62397+0.12541j,-0.22642+0.12183j,-0.53513-0.08526j,-0.0039188-0.37352j,-0.24366-0.57761j,-0.40834+0.62333j,-0.34348-0.3825j,-0.257+0.13823j],[-0.00024198-9.7419e-05j,-0.024984-0.23318j,-0.22059+0.14706j,-0.036762+0.019469j,-0.35703-0.38056j,-0.17193+0.44078j,0.17105-0.15398j,0.14647-0.40857j,0.24893-0.055328j,-0.44151-0.50958j,-0.45892-0.11296j,-0.71934+0.26003j,0.75042-0.25347j,0.034849+0.45261j,0.13567+0.050486j,-0.21088-0.46488j,-0.11865+0.49201j,0.012566-0.31925j,0.22958+0.54032j,0.10966+0.031162j,-0.18989-0.38517j,0.49161+0.35792j,-0.018325-0.044116j,-0.37261-0.58181j,0.08011+0.20719j,-0.069026+0.038045j,0.90098-0.25731j,-0.21915+0.18829j,-0.3554-0.15446j,-0.57571+0.13936j],[-0.081843+0.43111j,0.6851+0.17452j,0.15735-0.28617j,0.71614+0.25228j,-0.95043-0.052721j,-0.011685-0.64927j,-0.40386+0.69624j,0.674+0.22011j,-0.064578+0.038534j,0.36916-0.45769j,-0.016939-0.32337j,0.58778-0.80464j,0.039813-0.12859j,0.39121+0.40484j,-0.66394+0.13282j,0.47842-0.50372j,0.31719+0.70865j,0.79198-0.25539j,-0.0047263+0.018484j,-0.15519+0.82597j,0.64919-0.45676j,0.2484-0.89687j,-0.28506-0.63752j,-0.24286-0.27004j,-0.90295-0.067674j,-0.0024307-0.030834j,-0.11385+0.29899j,0.12268+0.02036j,-0.64952+0.73198j,-0.22506+0.52516j]])
                init_vel=np.array([[-0.16748-0.15125j,0.25352+0.91194j,-0.31061-0.014168j,0.34921-0.076873j,-0.045293-0.09067j,0.22938-0.46868j,0.18102+0.021642j,0.027652-0.011966j,-0.38069+0.10586j,0.45206-0.36557j,-0.024838+0.091291j,-0.20722-0.7025j,0.10869-0.29497j,-0.45524-0.483j,-0.65111+0.19717j,-0.10024+0.14721j,0.19927-0.087607j,-0.019418-0.27378j,-0.18608-0.010974j,-0.5408-0.63267j,0.72506+0.19216j,0.0094131+0.029175j,-0.60714-0.27419j,-0.035234-0.3567j,0.51617+0.48885j,-0.46743-0.57218j,0.68882+0.26687j,0.43737-0.21077j,-0.037839-0.06663j,-0.030272+0.13875j],[-0.042752-0.10777j,0.47892+0.11455j,-0.0076746+0.00068654j,0.039471-0.64763j,0.034377-0.5873j,0.4074-0.2017j,0.22429+0.51246j,-0.63922+0.062583j,-0.43705+0.015909j,0.6136-0.61913j,-0.048659+0.18154j,0.097192-0.62348j,-0.015197+0.64129j,0.014482+0.12403j,-0.93011-0.0032701j,-0.24432+0.91726j,-0.0070731-0.0047534j,-0.4085+0.42078j,0.35406-0.17013j,-0.1449+0.037821j,0.0047968-0.014096j,0.8053+0.074012j,-0.25819-0.3759j,0.019246-0.016474j,-0.124-0.53473j,-0.061255-0.083092j,0.0022578+0.013672j,-0.034559-0.0033174j,0.52993+0.2977j,0.45423-0.27342j],[0.013088+0.13333j,-0.38747-0.64007j,0.39744-0.47014j,0.017649+0.84579j,-0.49905-0.3002j,-0.62751-0.73535j,0.61765+0.10476j,0.23275-0.8052j,-0.075803+0.038196j,-0.13862-0.1536j,0.01888+0.66757j,0.20639-0.42026j,0.17535-0.53397j,-0.49446+0.45807j,-0.80204-0.209j,-0.057463-0.19117j,-0.25065-0.16598j,-0.37958+0.11477j,-0.14726+0.047044j,-0.64113-0.22526j,-0.067341-0.1253j,0.0038957-0.046985j,-0.53201-0.60147j,-0.11019-0.18878j,-0.82232+0.28312j,-0.42257-0.87471j,0.33469+0.59092j,-0.053-0.10143j,0.036416+0.23061j,0.12181+0.92229j]])
            case 26:
                init_pole=np.array([[-0.10127+0.22706j,-0.38482+0.58913j,0.0030923-0.019187j,-0.027501-0.087456j,0.14358-0.13844j,-0.64195-0.38534j,-0.22968+0.95311j,-0.66552-0.15449j,-0.18128-0.052961j,0.68672+0.4631j,-0.80488-0.068731j,-0.33233+0.63583j,-5.3673e-05+7.1014e-05j,0.0039083-0.0058515j,-0.42974+0.64514j,-0.15215-0.0070676j,-0.15263+0.91935j,0.054604+0.0085364j,0.039436+0.021684j,0.093241-0.067439j,-0.23575+0.55836j,0.29691-0.94785j,0.95325+0.038212j,0.61841+0.11562j,-0.17812-0.027739j,0.055394+0.43939j,0.75668+0.35907j,-0.089468+0.13334j,-0.0083741-0.37945j,-0.30735+0.13535j],[-0.13184+0.66332j,0.58067-0.60297j,-0.45163-0.36985j,0.55185+0.054798j,-0.47783+0.21826j,0.044511+0.3115j,0.63386-0.32611j,-0.34588+0.59636j,0.3844+0.3087j,-0.075727+0.1882j,0.2373-0.26418j,0.038426+0.19883j,0.32581-0.39648j,-0.77439-0.44365j,0.7868+0.045898j,0.34818+0.053448j,-0.030926-0.088048j,-0.41054+0.6362j,0.73952+0.40265j,0.26653-0.052044j,-0.63981-0.22272j,0.49472-0.57368j,0.36011-0.19826j,-0.0035662-0.014435j,-0.20045-0.0028212j,0.62699+0.56722j,0.69582+0.27561j,0.3656+0.38211j,0.031728-0.087665j,-0.30596+0.21703j],[0.27657-0.58656j,-0.082214+0.72263j,0.91501+0.10375j,-0.3756-0.85166j,-0.085976-0.093118j,0.040434-0.18275j,-0.2476+0.78765j,0.042337+0.52919j,0.36431+0.42469j,0.20238-0.4874j,0.54364-0.066988j,-0.63954-0.073551j,-0.035854+0.5687j,-0.15918-0.81785j,0.13219+0.34947j,-0.61347-0.19951j,0.54282-0.50113j,-0.40812+0.21969j,0.14797+0.072348j,-0.24388+0.1984j,0.25791-0.95337j,0.081642-0.26266j,0.21525+0.024396j,-0.042045-0.01035j,0.65898+0.28848j,0.38899-0.025035j,-0.30795-0.49605j,-0.30129-0.35113j,-0.030907+0.2573j,-0.11378-0.091908j]])
                init_vel=np.array([[-0.57152-0.51614j,-0.24572-0.070836j,-0.046201+0.33781j,-0.15858-0.15249j,-0.56304+0.30052j,0.69579+0.32618j,0.010171+0.051446j,-0.090324-0.62372j,-0.030003-0.61595j,0.57595+0.66115j,-0.081306-0.14709j,-0.6525+0.035967j,-0.29778+0.027141j,-0.02423+0.019106j,0.058248+0.031549j,0.097562-0.027297j,-0.17224+0.25991j,-0.89406-0.32578j,0.14052-0.58218j,0.11492-0.19143j,0.93418+0.090958j,0.40567+0.32903j,-0.17401+0.29968j,-0.20785+0.51634j,-0.099565-0.22279j,-0.014636+0.152j,-0.35214-0.35795j,0.94843-0.26457j,0.42578-0.26575j,0.050748+0.060048j],[0.82048+0.46101j,0.2336-0.29758j,0.70468+0.55913j,-0.31176-0.94076j,-0.33534+0.37643j,0.56877+0.54012j,0.025821+0.32239j,-0.91141-0.36772j,0.13952-0.27539j,0.1975+0.55671j,0.31613+0.12482j,0.036943-0.24148j,0.37687+0.18268j,0.016203+0.18588j,0.29942-0.14685j,-0.038411+0.060744j,0.5454+0.22963j,0.6178-0.41168j,-0.39732+0.56367j,-0.031199-0.1275j,0.0085661+0.033401j,0.4904-0.64248j,-0.74297+0.14588j,-0.88489+0.082401j,0.36953-0.23067j,0.68269-0.32929j,0.54042-0.18208j,-0.10899+0.78266j,0.056165+0.24896j,-0.051678+0.02131j],[-0.10155-0.083493j,-0.6204-0.77628j,0.22052+0.088135j,-0.14843+0.93945j,0.31145+0.17677j,-0.012665-0.025997j,0.79851+0.043364j,-0.14989-0.050763j,-0.066696+0.052821j,-0.05624-0.29786j,-0.050389+0.044832j,0.45388+0.60698j,0.013015-0.054294j,0.23693+0.13136j,0.014009+0.047899j,0.87605-0.22513j,-0.28719-0.2452j,0.26762+0.84576j,0.38514-0.068089j,0.037731+0.1683j,-0.85657-0.19978j,0.37918-0.2378j,0.36015+0.0065561j,-0.064158+0.83771j,-0.74858-0.35514j,0.80606+0.34428j,-0.84697-0.08755j,-0.34565-0.059185j,0.23656-0.45167j,0.4498-0.44821j]])
            case 27:
                init_pole=np.array([[0.68214+0.17534j,-0.0082926+0.077385j,-0.51733-0.67j,0.11305+0.039245j,-0.7421+0.085597j,0.24072+0.74431j,0.42234-0.80324j,0.060175+0.082705j,0.7502-0.18676j,-0.01296+0.015782j,-0.064162-0.087677j,-0.09623+0.13768j,0.34159+0.49209j,-0.67802+0.2628j,0.34054-0.55811j,0.81733+0.53807j,0.25328+0.20368j,0.22762-0.14121j,-0.85343-0.44667j,-0.18016+0.25226j,0.19528-0.14921j,-0.10033-0.95624j,0.11377+0.55628j,0.83587-0.27767j,0.16155+0.26824j,0.92366+0.058961j,0.62597+0.2302j,0.025931+0.012975j,0.4976+0.5086j,0.95273+0.10586j],[-0.18052+0.46308j,0.17404+0.16733j,0.010472-0.010548j,0.035123-0.5869j,0.27606+0.14087j,0.017865-0.099455j,0.066437+0.08903j,0.40507-0.65242j,0.82908+0.42569j,0.761+0.34033j,-0.078205+0.0426j,0.19646+0.95246j,-0.59645+0.6087j,-0.25978-0.3052j,0.040101-0.38977j,-0.27682-0.43813j,-0.14053-0.13845j,-0.42328-0.33318j,0.26787-0.030253j,0.55407-0.059852j,-0.035755-0.67523j,-0.45778+0.19498j,0.45116-0.41505j,0.12551+0.099194j,-0.59833-0.10432j,0.047813+0.031056j,-0.33688-0.51709j,0.030311+0.57167j,-0.014233-0.21356j,-0.075674-0.1654j],[0.59661-0.12515j,-0.020135-0.016106j,0.4398-0.33095j,0.3933-0.48214j,0.7716+0.49459j,-0.23474+0.15466j,-0.084624-0.78527j,-0.63534-0.18617j,0.16182-0.071437j,0.4624-0.10051j,-0.094632-0.065572j,0.27796+0.067362j,0.17505-0.1711j,-0.23657+0.20126j,0.084073+0.084693j,-0.36502+0.35297j,-0.62305-0.59699j,-0.54913+0.050705j,-0.26391-0.03093j,0.37771-0.018977j,-0.13338-0.22469j,-0.34549+0.25224j,0.75412-0.28729j,0.083326+0.031771j,0.34295+0.16072j,-0.77601-0.62118j,-0.13142-0.067817j,-0.017804+0.024123j,-0.24047+0.085415j,0.5849-0.54353j]])
                init_vel=np.array([[-0.11943+0.072704j,0.0051702+0.023831j,0.76896+0.023872j,0.47738+0.061485j,0.47818-0.32607j,-0.053491+0.13172j,0.12597+0.021342j,-0.01153-0.062925j,0.6211+0.58743j,0.88057+0.0072176j,0.20141+0.27882j,-0.67601-0.45208j,-0.54156-0.32092j,0.59119+0.12075j,0.40075-0.61963j,0.39381+0.17077j,-0.22623-0.22738j,-0.025886-0.62506j,0.20318+0.13619j,-0.065927+0.30285j,0.0089788-0.13044j,-0.11058-0.59481j,0.13199+0.0059271j,0.13368+0.23585j,0.28966+0.33821j,0.46539+0.62525j,0.43983-0.55574j,0.17636-0.89761j,0.49603-0.029551j,-0.07969+0.69006j],[-0.56197-0.58452j,-0.50254-0.17066j,0.28605+0.28635j,0.27555+0.34454j,-0.59054-0.51508j,0.24382+0.6486j,0.31101-0.56038j,0.23097-0.46984j,-0.0067372+0.0059901j,0.21784+0.0095845j,-0.79629-0.077766j,-0.01454+0.084944j,0.046115+0.044181j,0.39268+0.69521j,-0.26275+0.70998j,0.1768-0.062387j,0.11885+0.42573j,0.52279+0.7798j,0.91345-0.11657j,0.051374-0.05665j,0.36672-0.28014j,-0.12376+0.028604j,0.040099+0.10814j,0.88263-0.33512j,-0.16416-0.2613j,0.067273+0.15483j,0.366-0.48192j,-0.073622+0.47147j,0.80001+0.4694j,0.00097605+0.0044887j],[-0.24346-0.068309j,0.60825-0.70992j,0.11261-0.70892j,-0.40344+0.85164j,0.71124+0.071283j,-0.062723+0.38862j,0.044573-0.49551j,0.028703-0.31323j,0.19948+0.035361j,0.15691+0.27624j,-0.4985+0.27863j,-0.16037-0.10582j,0.6542+0.35216j,-0.15875-0.024296j,0.31845+0.82177j,0.0099633+0.30287j,0.018766+0.3614j,0.12731-0.25711j,-0.52914-0.76019j,0.76692+0.147j,-0.32299-0.29904j,0.03343-0.59811j,0.37024+0.23973j,0.30218-0.41905j,0.45593+0.11246j,-0.01372-0.017771j,-0.41339+0.015493j,0.89704-0.18648j,-0.33819+0.61705j,0.057667-0.53713j]])
            case 28:
                init_pole=np.array([[-0.14444+0.33527j,0.5506+0.70352j,-0.00069766-0.01836j,0.72427-0.61762j,0.66007-0.60471j,-0.0026216-0.016473j,0.15725-0.23785j,-0.55775-0.10802j,-0.03221-0.15181j,-0.38378+0.097242j,0.15501-0.41906j,-0.28864+0.27515j,-0.91058+0.057365j,0.83104-0.28631j,-0.23142-0.85144j,0.074857-0.41829j,-0.095175+0.008772j,-0.45269+0.20399j,-0.22713-0.014901j,-0.0075837-0.18309j,0.013528-0.13652j,0.26848-0.12609j,-0.0034498-0.0025602j,-0.1842-0.12741j,-0.69656-0.4903j,-0.31194+0.42962j,0.33421+0.18785j,-0.097447+0.02696j,0.57565+0.28699j,0.61829-0.058604j],[0.071787-0.13626j,0.86011+0.39335j,0.21511-0.35993j,0.14066+0.23068j,-0.75348+0.18361j,0.71377-0.64091j,-0.47424-0.11558j,0.15157-0.22823j,0.1748-0.20422j,0.39782-0.15024j,-0.009795+0.0069727j,-0.18976-0.96089j,0.23522+0.22304j,-0.52998-0.57112j,-0.4183-0.078833j,-0.33569-0.30746j,0.5647+0.46806j,-0.23282+0.11497j,0.93039-0.21594j,0.46355+0.4181j,-0.18277-0.047866j,0.061572+0.22907j,-0.061045-0.048825j,-0.11541-0.68564j,-0.49925+0.25158j,-0.82211-0.24865j,-0.14609+0.57716j,-0.37193+0.0018343j,-0.40737+0.66125j,0.0029176-0.27906j],[-0.0070887-0.16487j,-0.50695-0.10378j,-0.022377-0.12002j,0.26952+0.85204j,0.35016+0.83865j,0.022358-0.071854j,0.2438+0.93945j,0.027889+0.12603j,-0.42684+0.077914j,-0.42522-0.44347j,-0.014863+0.03088j,0.19005+0.50841j,0.18529+0.22375j,-0.36548+0.14829j,-0.26834-0.38144j,-0.69536-0.0091204j,0.11255-0.065091j,0.58168+0.10826j,-0.0099938+0.062212j,0.035306-0.28926j,0.46444+0.83631j,0.65508+0.081755j,-0.30368+0.060197j,-0.58673+0.38219j,0.41121+0.3952j,0.31142+0.31975j,-0.13537-0.27336j,0.20733+0.079802j,-0.22139+0.36867j,-0.28935-0.38053j]])
                init_vel=np.array([[-0.88152+0.04877j,0.5926+0.65564j,-0.55339+0.3571j,0.052248+0.27163j,0.18944+0.12805j,-0.22261+0.12671j,0.37669+0.31676j,-0.2565+0.47904j,0.11384-0.096227j,-0.71227+0.39275j,0.88204-0.14565j,0.088922-0.27351j,0.27972-0.83155j,-0.096661-0.078173j,-0.37391+0.0096626j,-0.70529+0.032219j,-0.020202+0.034347j,0.53585+0.3477j,0.29294-0.25063j,0.08893+0.54441j,-0.42756+0.21081j,-0.00018005+0.049162j,0.39565-0.23717j,-0.24324-0.27521j,0.0073238-0.74536j,0.80314-0.42037j,-0.0026509-0.0013201j,0.22216+0.071719j,-0.48403-0.51757j,-0.058859+0.025281j],[-0.38083-0.34205j,-0.096442+0.22605j,-0.051552+0.25037j,-0.16906-0.24627j,0.58387-0.32887j,0.47597+0.39601j,0.026403+0.29987j,-0.073912+0.10667j,0.064368-0.25041j,-0.57249+0.43422j,0.072239+0.94797j,0.88989+0.2574j,0.20674-0.052256j,0.57274-0.039498j,-0.014419+0.75448j,-0.22615-0.90158j,0.18006+0.94926j,-0.0074179-0.0080602j,-0.35782+0.17802j,0.27867-0.91751j,-0.74452-0.46503j,-0.2556-0.17084j,-0.25297-0.41747j,0.80621+0.48614j,-0.40637+0.81319j,0.053409+0.018986j,-0.14212+0.057097j,0.038469+0.53393j,-0.58063+0.086681j,0.0027489-0.0019481j],[0.26971+0.26227j,0.13964+0.086003j,-0.10746-0.11529j,0.0020534+0.0055358j,-0.91667-0.35126j,-0.91895-0.3162j,0.38448+0.45684j,0.49781-0.23902j,0.47188+0.23846j,-0.42773+0.26052j,0.35887+0.29152j,0.4807-0.12356j,0.011302-0.11384j,-0.43081-0.17862j,0.15174+0.42959j,0.81798-0.063763j,-0.50041+0.73354j,-0.70473+0.67705j,0.39476-0.32335j,0.5381-0.66495j,0.32694+0.21241j,-0.31754-0.041289j,-0.70674+0.0015429j,0.25942+0.068012j,0.53428+0.23717j,0.50677+0.23052j,0.40148+0.069729j,0.21713+0.2235j,0.1843+0.15246j,-0.17313-0.075998j]])
            case 29:
                init_pole=np.array([[0.2634-0.68151j,0.49686-0.079393j,0.72694-0.23609j,0.33785-0.27435j,-0.53229-0.69633j,-0.20108+0.22712j,-0.039561-0.089512j,0.046242+0.19395j,-0.036481-0.88978j,0.53081+0.41852j,-0.0021858-0.0038732j,-0.46433-0.30999j,0.52427+0.26107j,0.50258+0.023291j,-0.30269-0.88579j,-0.5198+0.54278j,0.079516-0.084857j,-0.47796-0.70216j,-0.40501+0.34253j,-0.56591+0.28706j,-0.83501-0.30729j,-0.033124+0.76142j,-0.48518-0.011478j,-0.4429+0.014308j,0.70969-0.09822j,-0.10176-0.046219j,0.29217-0.4606j,-0.53028+0.33826j,-0.64969+0.38339j,-0.46646+0.20021j],[0.89614+0.39903j,-0.47352-0.24161j,0.48583+0.35316j,0.14485+0.63009j,0.10667+0.22797j,-0.79134+0.55709j,-0.66389-0.20148j,0.5301-0.29582j,-0.43529+0.41677j,0.58485-0.52361j,-0.0271-0.19675j,-0.26457+0.27987j,0.76553-0.034956j,0.29324-0.24587j,0.66962-0.59041j,0.78846+0.45316j,0.52512+0.00023182j,-0.15837+0.09799j,-0.08049+0.025007j,0.087422+0.068522j,-0.37554-0.31582j,-0.14186-0.94393j,0.34243-0.27339j,0.035261-0.48684j,0.45994+0.41625j,0.41921+0.39442j,0.035135+0.014506j,-0.33688-0.34462j,-0.19008-0.77039j,-0.15696-0.1789j],[0.19625+0.55451j,-0.52529-0.30275j,0.52279-0.49882j,0.088073+0.15318j,0.26509+0.23834j,0.16248+0.10284j,0.095651-0.0084606j,-0.36065-0.61124j,-0.85164+0.13616j,-0.50504+0.18146j,-0.097435+0.42777j,0.18295-0.62045j,0.028434-0.1723j,0.64219-0.73655j,-0.43324+0.094999j,0.37326-0.0065239j,-0.14529-0.30864j,-0.20645+0.030881j,0.23737+0.040292j,0.5852+0.16251j,-0.02198-0.31274j,-0.14781-0.62874j,0.034217-0.18321j,-0.42879-0.74678j,0.061175-0.065703j,0.45366-0.085567j,-0.10165+0.5703j,0.14023-0.078126j,0.2865-0.053023j,0.15698-0.11173j]])
                init_vel=np.array([[0.82133+0.29168j,0.097853-0.61317j,-0.33753+0.15023j,-0.02412+0.16911j,0.40768+0.79144j,0.69507+0.48696j,0.34708-0.071998j,-0.29393-0.53631j,0.7625+0.44487j,-0.45031-0.33653j,0.78429+0.015659j,-0.08655-0.0025294j,0.14926+0.53809j,-0.54412-0.47949j,0.15775+0.27232j,-0.68513+0.52618j,0.032888+0.42378j,-0.78984-0.057248j,-0.20959+0.43285j,-0.39452+0.026458j,0.63865+0.070427j,0.87264+0.25636j,-0.7032+0.03819j,-0.026665-0.52089j,-0.73817+0.30453j,-0.55953+0.53628j,0.31635-0.89211j,-0.0057552-0.55442j,-0.22288+0.028022j,-0.17957+0.92377j],[-0.016292+0.14178j,-0.61608-0.47023j,0.18777-0.28476j,-0.7425-0.067996j,0.034986-0.074266j,0.44218+0.088142j,0.57888-0.49104j,0.83409-0.12341j,-0.31189+0.38254j,-0.68824+0.21709j,-0.44546-0.02825j,-0.90858-0.41516j,-0.076671+0.1205j,-0.35072-0.22627j,-0.33529-0.47534j,-0.16763+0.12791j,0.22744-0.07567j,0.37288+0.09932j,0.26395-0.08885j,-0.26838+0.097243j,0.22932-0.92904j,-0.56659-0.049432j,-0.34952-0.5499j,0.023238-0.0085565j,0.090915+0.057947j,0.044348-0.79025j,-0.24565-0.16874j,-0.64893+0.096638j,-0.87177+0.45099j,0.68793-0.66522j],[-0.19227-0.057186j,-0.099578+0.22583j,-0.32041-0.325j,0.074862-0.063209j,0.32745+0.70961j,0.60409+0.038676j,0.56095+0.18104j,0.08488+0.44904j,-0.06569-0.61938j,0.46674-0.2848j,0.56135+0.71865j,-0.45609-0.56688j,-0.39184+0.74034j,-0.10387-0.25265j,0.080542-0.68464j,-0.18025-0.47361j,0.49827+0.57059j,-0.12155+0.29391j,0.041854+0.15239j,0.10466-0.21936j,-0.18025-0.047235j,-0.18233+0.064837j,-0.33171-0.011197j,0.0067928-0.021212j,0.62967-0.27923j,0.23526-0.66933j,-0.45202+0.88732j,-0.94082-0.092457j,0.076487+0.15252j,0.12286-0.12464j]])
        xx[d][0::2, :] = np.real(init_pole)
        xx[d][1::2, :] = np.imag(init_pole)

        # Initilaizing velocities  
        """
        r = np.random.rand(dim//2, s)
        phi = 2 * np.pi * np.random.rand(dim//2, s)
        init_vel = r * np.exp(1j * phi)
        """
        vx[d][0::2, :] = np.real(init_vel)
        vx[d][1::2, :] = np.imag(init_vel)

        # Inserting user defined particles to the initial swarm.
        if insparts[d] is not None:
            insdim = insparts[d].shape[1] # Number of inserted particle at dimension 'd'.
            xx[d][:, :insdim] = insparts[d] # Overwrite the first insdim number of particles at dimension 'd'.

        ###print("ps",ps[d])
        #print(hf)
        err = errors_d(hf, xx[d], ps[d][0], alpha, eps)
        #print(eps)
        xy[d] = xx[d].copy()

        # Computing the gbest and pbest particles for the initial swarm at each dimension. 
        gbest[d] = np.argmin(err)
        xy_g[d] = xx[d][:, gbest[d]].copy()
        pbesterr_a[d] = err
        gbesterr_d[d] = err[gbest[d]]
    
    err = errors_gd(hf, xy_g, ps, s, alpha, eps)
    dbest = np.argmin(err) # Initializing dbest, the optimum dimension.
    
    # Initializing parameters for MDPSO
    c1 = 1.5
    c2 = 2
    w_high = 0.8
    w_low = 0.2
    w = w_high
    """
    r = np.random.rand(2, 1)
    r1 = np.random.rand(Dmax, 1)
    r2 = np.random.rand(Dmax, 1)
    """
    r=np.array([0.48959,0.60628])
    r1=np.array([0.71769,0.14002,0.58305,0.195,0.063338,0.063902,0.93987,0.52018,0.15012,0.64659,0.58378,0.31233,0.67214,0.39706,0.21952,0.24082,0.38638,0.033501,0.34672,0.55204,0.55844,0.066815,0.58194,0.47586,0.66194,0.7861,0.19003,0.96151,0.53506,0.91452])
    r2=np.array([0.64566,0.15347,0.052182,0.015051,0.19636,0.52771,0.14767,0.073134,0.55484,0.98128,0.16286,0.1566,0.16367,0.07849,0.7184,0.44627,0.51012,0.60514,0.88307,0.12192,0.29026,0.062342,0.14353,0.067965,0.18509,0.76868,0.89768,0.51827,0.84463,0.22876])
    Vmax = 0.5
    VDmin = 0
    VDmax = 3
    maxPD = 8 # Maximal number of particles in each dimension.
    fig, ax=plt.subplots(1, 2)

    maxpn = len(ps[-1][0][0:-1]) # Maximal number of poles in the highest dimension.
 
    for t in range(1, iterno+1):
        err = errors_xd(hf, xx, xd, ps, s, alpha, eps)
        print(t, '============================')
        for a in range(s):
            #print('   ', a, '-------------')
            if err[a] < pbesterr_a[xd[a]-1][a]:
                print(t, a+1, xd[a])
                xy[xd[a]-1][:, a] = xx[xd[a]-1][:, a].copy()
                pbesterr_a[xd[a]-1][a] = err[a]
                if err[a] < pbesterr_a[xd_[a]-1][a]:
                    print("!")
                    xd_[a] = xd[a]-1

            ind = xd == xd[a]
            ind[a] = 0
            err_d = err[ind]
            #print(err_d)
            #print(err)
            min_err_d = min(err_d) if len(err_d)>0 else float('inf')

            if err[a] < min(gbesterr_d[xd[a]-1], min_err_d):  # (Step 3.1.4.)
                gbest[xd[a]-1] = a
                xy_g[xd[a]-1] = xx[xd[a]-1][:, a].copy()
                gbesterr_d[xd[a]-1] = err[a]
                if err[a] < gbesterr_d[dbest]:  # (Step 3.1.4.2.)
                    dbest = xd[a]
        
        for m in range(1, maxpn+1):
            for a in range(s):
                # Computing the position updates using the hyperbolic metric.
                if m < len(ps[xd[a]-1][0]):
                    cy = array2complex(xy[xd[a]-1][2*m-2:2*m, a])
                    cx = array2complex(xx[xd[a]-1][2*m-2:2*m, a])
                    #print(xx[xd[a]-1][2*m-2:2*m, a])
                    cy_ = array2complex(xy_g[xd[a]-1][2*m-2:2*m])
                    cv = array2complex(vx[xd[a]-1][2*m-2:2*m, a])
                    #print(vx[xd[a]-1])
                    #print(vx[xd[a]-1][2*m-2:2*m, a])
                    #exit(0)

                    #print(cx)
                    #print(w)
                    _, term1 = scale(0, cv, w, 0)
                    _, term2 = scale(0, add(-cx, cy), c1*r1[xd[a]-1], 0)
                    _, term3 = scale(0, add(-cx, cy_), c2*r2[xd[a]-1], 0)
                    term123 = add(add(term1, term2), term3)
                    if rho(0, term123) > Vmax:
                        _, term123 = scale(0, term123, 0.5/rho(0, term123), 0)
                                        
                    vx[xd[a]-1][2*m-2:2*m, a] = np.reshape(complex2array(term123), 2)
                    xx[xd[a]-1][2*m-2:2*m, a] = np.reshape(complex2array(add(cx, term123)), 2)
                    
                   
                    # Computing the dimension updates.
                    """
                    print(vd[a])
                    print('c1', c1)
                    print('c2', c2)
                    print('r[0]', r[0])
                    print('r[1]', r[1])
                    print('xd_[a]', xd_[a])
                    print('xd[a]', xd[a])
                    print('dbest', dbest)
                    """
                    #vd[a] = np.floor(vd[a] + c1*r[0]*(xd_[a]-xd[a]) + c2*r[1]*(dbest+1-xd[a]))
                    vd[a] = np.floor(vd[a] + c1*r[0]*(xd_[a]-xd[a]) + c2*r[1]*(dbest-xd[a]))
                    xd_next = xd[a] + Cvd(vd[a], VDmin, VDmax)
                    PD = np.sum(xd == xd_next) # Number of particles in dimension xd_next                   
                    xd[a] = Cxd(xd[a], xd_next, Dmin, Dmax, PD, maxPD)
                    """
                    print('---')
                    print(vd[a])
                    print(xd_next)
                    print(PD)
                    print(xd[a])
                    exit(0)
            
            r = np.random.rand(2, 1)
            r1 = np.random.rand(Dmax, 1)
            r2 = np.random.rand(Dmax, 1)
                    """

            if t==1 & m==1:
                r=np.array([0.42837,0.36829])
                r1=np.array([0.69605,0.94438,0.21789,0.753,0.51984,0.76007,0.88087,0.23748,0.93969,0.027152,0.56151,0.89045,0.16699,0.42524,0.3269,0.56759,0.82699,0.39168,0.62135,0.96515,0.82847,0.8134,0.95509,0.18312,0.67043,0.7356,0.81955,0.68102,0.33006,0.034692])
                r2=np.array([0.12019,0.28371,0.83824,0.90135,0.44995,0.98854,0.033789,0.85945,0.52856,0.97546,0.87722,0.16134,0.35338,0.058007,0.44412,0.44109,0.3267,0.9144,0.49456,0.71024,0.66464,0.83178,0.25804,0.76924,0.41057,0.055657,0.87065,0.9723,0.11698,0.50831])

            elif t==1 & m==2:
                r=np.array([0.75557,0.10999])
                r1=np.array([0.033864,0.4411,0.12978,0.9716,0.94015,0.93312,0.98376,0.69304,0.70248,0.37131,0.064106,0.44345,0.54299,0.54016,0.78628,0.60141,0.94701,0.63122,0.87884,0.12269,0.81355,0.9776,0.23124,0.91274,0.67637,0.72507,0.68579,0.79672,0.52963,0.75464])
                r2=np.array([0.50355,0.90704,0.12361,0.85223,0.17505,0.76417,0.45933,0.60606,0.36404,0.40195,0.73007,0.95513,0.8788,0.60973,0.96777,0.63414,0.77726,0.8985,0.22657,0.10127,0.82826,0.42447,0.7271,0.93675,0.29653,0.3122,0.5497,0.55258,0.6404,0.59665])

            elif t==2 & m==1:
                r=np.array([0.16117,0.41791])
                r1=np.array([0.36906,0.080265,0.23631,0.99434,0.9093,0.79079,0.13515,0.55034,0.053838,0.67655,0.82228,0.9114,0.14721,0.30486,0.77987,0.48723,0.54917,0.87822,0.98829,0.019152,0.35132,0.53465,0.74782,0.97001,0.69514,0.27327,0.95114,0.90767,0.45742,0.73317])
                r2=np.array([0.55824,0.99389,0.3893,0.88168,0.89327,0.386,0.72755,0.91265,0.90413,0.081452,0.033342,0.57241,0.0092902,0.19833,0.02068,0.79227,0.19083,0.95208,0.77023,0.81657,0.42605,0.30022,0.68029,0.85852,0.87179,0.89706,0.84359,0.48515,0.48854,0.065334])

            elif t==2 & m==2:
                r=np.array([0.45698,0.59556])
                r1=np.array([0.11008,0.34378,0.26407,0.58018,0.43539,0.4151,0.054213,0.2597,0.24418,0.7091,0.65885,0.11918,0.12922,0.077969,0.73524,0.55615,0.83437,0.10612,0.25656,0.054124,0.65655,0.27744,0.70913,0.1303,0.524,0.04589,0.10131,0.46894,0.71065,0.60135])
                r2=np.array([0.20492,0.61879,0.69915,0.31483,0.80479,0.17802,0.24131,0.59473,0.86823,0.81867,0.59008,0.0022878,0.94453,0.79248,0.39933,0.87345,0.6744,0.24237,0.16844,0.86112,0.32664,0.32515,0.40017,0.76351,0.16407,0.68829,0.64332,0.82135,0.37855,0.1119])

            elif t==3 & m==1:
                r=np.array([0.85948,0.71318])
                r1=np.array([0.57501,0.74114,0.75367,0.55509,0.80091,0.67035,0.53511,0.68593,0.95518,0.62775,0.81913,0.18897,0.75148,0.22158,0.41645,0.79087,0.39996,0.045109,0.20105,0.042863,0.63916,0.25176,0.41988,0.17184,0.88446,0.34101,0.20512,0.79539,0.02447,0.03978])
                r2=np.array([0.52982,0.93337,0.60221,0.60118,0.64387,0.92193,0.21926,0.8849,0.048822,0.81204,0.032592,0.41504,0.59467,0.1968,0.79609,0.21099,0.17441,0.61384,0.94106,0.66156,0.2149,0.91359,0.3802,0.034982,0.22735,0.90689,0.86899,0.58247,0.56079,0.0010886])

            elif t==3 & m==2:
                r=np.array([0.12686,0.21464])
                r1=np.array([0.82682,0.38761,0.31808,0.26178,0.29652,0.42818,0.19241,0.56748,0.65767,0.68558,0.35374,0.95679,0.24374,0.74827,0.39023,0.84476,0.37198,0.70761,0.34566,0.87716,0.75053,0.43443,0.40066,0.37294,0.44325,0.38031,0.072712,0.44028,0.60653,0.30478])
                r2=np.array([0.40664,0.10101,0.47688,0.29241,0.016283,0.88442,0.21031,0.68364,0.15439,0.97432,0.50266,0.89141,0.72649,0.49718,0.60721,0.34929,0.52621,0.79692,0.27368,0.29268,0.34815,0.87597,0.093319,0.20668,0.30276,0.35152,0.72675,0.88633,0.051926,0.078559])

            elif t==4 & m==1:
                r=np.array([0.014486,0.19334])
                r1=np.array([0.026289,0.46877,0.24338,0.91992,0.71583,0.48865,0.078074,0.53007,0.66605,0.60771,0.41955,0.1108,0.81661,0.2493,0.50918,0.80413,0.50983,0.3027,0.86193,0.057394,0.73076,0.90088,0.46404,0.46936,0.15381,0.96179,0.87625,0.48863,0.40708,0.12658])
                r2=np.array([0.92543,0.0055811,0.18639,0.32406,0.050187,0.14454,0.72937,0.48228,0.33806,0.23677,0.45086,0.18545,0.32425,0.26397,0.83008,0.69636,0.33354,0.58023,0.28784,0.26397,0.2599,0.67708,0.51983,0.076754,0.055845,0.25873,0.43993,0.28429,0.67877,0.94958])

            elif t==4 & m==2:
                r=np.array([0.77396,0.63614])
                r1=np.array([0.75358,0.74682,0.58603,0.77306,0.39249,0.60529,0.24743,0.2902,0.019333,0.34731,0.1418,0.41153,0.15307,0.82901,0.7392,0.09887,0.82063,0.22711,0.10694,0.66278,0.95458,0.81456,0.62325,0.32827,0.27737,0.43438,0.3503,0.87776,0.0061545,0.69645])
                r2=np.array([0.33806,0.30498,0.6481,0.92115,0.89307,0.99718,0.072884,0.12962,0.98157,0.090242,0.68616,0.92896,0.14182,0.88442,0.019762,0.34269,0.23831,0.98456,0.8466,0.79451,0.90028,0.7801,0.83651,0.32109,0.74275,0.66449,0.28918,0.33737,0.90864,0.032251])

            elif t==5 & m==1:
                r=np.array([0.69636,0.20877])
                r1=np.array([0.82415,0.21823,0.099642,0.61951,0.10381,0.79906,0.90293,0.31251,0.28159,0.0067819,0.49587,0.98848,0.73794,0.31072,0.60041,0.78168,0.11153,0.57933,0.87037,0.68978,0.24297,0.34272,0.54544,0.067573,0.41045,0.23751,0.48897,0.80607,0.37785,0.51798])
                r2=np.array([0.094598,0.9091,0.20763,0.38206,0.66028,0.75837,0.17307,0.51738,0.99534,0.70761,0.080567,0.043308,0.49116,0.4466,0.4868,0.16589,0.36066,0.88072,0.74435,0.41677,0.90735,0.094307,0.18133,0.94659,0.10085,0.38804,0.28922,0.073087,0.19461,0.41749])

            elif t==5 & m==2:
                r=np.array([0.29293,0.70214])
                r1=np.array([0.23971,0.95948,0.30546,0.15492,0.55551,0.79054,0.44387,0.99582,0.43659,0.30444,0.24651,0.96083,0.22288,0.39561,0.22452,0.27002,0.41844,0.99774,0.91103,0.55043,0.59634,0.079145,0.57664,0.89817,0.46331,0.3984,0.10446,0.65224,0.9917,0.67807])
                r2=np.array([0.42848,0.6548,0.58875,0.74505,0.64087,0.50368,0.93804,0.60534,0.63892,0.70266,0.86095,0.37966,0.71212,0.52352,0.36349,0.43468,0.6876,0.22685,0.979,0.97567,0.28951,0.33843,0.99644,0.78897,0.79492,0.63237,0.81145,0.44809,0.83061,0.12666])

            elif t==6 & m==1:
                r=np.array([0.51327,0.71593])
                r1=np.array([0.24815,0.5319,0.38221,0.80176,0.67086,0.98286,0.93682,0.57627,0.080186,0.41382,0.18085,0.99563,0.52039,0.88528,0.64825,0.46625,0.095281,0.96782,0.62011,0.156,0.39837,0.8825,0.53901,0.54368,0.44245,0.18375,0.24923,0.28511,0.52951,0.55984])
                r2=np.array([0.41515,0.90568,0.30514,0.64977,0.28878,0.25525,0.35818,0.80592,0.53893,0.59006,0.23114,0.10195,0.64464,0.98014,0.10172,0.18787,0.0093854,0.8383,0.48134,0.46853,0.90855,0.41715,0.54414,0.69901,0.07905,0.50942,0.4869,0.85588,0.6144,0.11742])

            elif t==6 & m==2:
                r=np.array([0.60687,0.16418])
                r1=np.array([0.39903,0.53236,0.87521,0.65904,0.78763,0.12603,0.52497,0.89948,0.10908,0.63457,0.080846,0.41123,0.71263,0.10042,0.80995,0.63781,0.89807,0.62182,0.41461,0.64756,0.48927,0.093755,0.63732,0.95026,0.47638,0.6028,0.59148,0.22526,0.66843,0.15655])
                r2=np.array([0.77425,0.21305,0.16912,0.72575,0.25619,0.16277,0.62578,0.25075,0.26298,0.84393,0.39742,0.10458,0.19385,0.36307,0.87453,0.59977,0.25811,0.35843,0.88754,0.90053,0.44795,0.26885,0.55382,0.17885,0.8597,0.23198,0.16811,0.026723,0.32243,0.55516])

            elif t==7 & m==1:
                r=np.array([0.82453,0.80425])
                r1=np.array([0.024408,0.37151,0.49187,0.46605,0.041714,0.617,0.57803,0.29881,0.43567,0.13663,0.29972,0.76137,0.035303,0.2695,0.99627,0.44695,0.15278,0.88623,0.03138,0.11603,0.25086,0.75967,0.89831,0.22342,0.6733,0.81879,0.94893,0.87432,0.39374,0.93696])
                r2=np.array([0.4369,0.16252,0.30982,0.68111,0.93405,0.94739,0.59908,0.94887,0.40402,0.041032,0.29383,0.031939,0.86451,0.43255,0.092809,0.13779,0.24197,0.22301,0.86774,0.76418,0.34471,0.38478,0.59487,0.53512,0.33356,0.85468,0.26564,0.93394,0.38983,0.68307])

            elif t==7 & m==2:
                r=np.array([0.27501,0.027958])
                r1=np.array([0.94061,0.53397,0.67117,0.60753,0.75087,0.98132,0.72767,0.85732,0.99184,0.75946,0.14604,0.32631,0.028786,0.69455,0.95876,0.72905,0.73675,0.17461,0.35541,0.57465,0.45995,0.83372,0.81544,0.32395,0.46168,0.67396,0.59523,0.13439,0.019492,0.12511])
                r2=np.array([0.22328,0.44914,0.53453,0.99039,0.71735,0.98006,0.053738,0.63687,0.96038,0.26992,0.94941,0.90223,0.19465,0.73395,0.17486,0.10514,0.31411,0.34877,0.39896,0.28392,0.31391,0.71828,0.94465,0.087789,0.27953,0.59616,0.82843,0.78215,0.55724,0.036276])

            elif t==8 & m==1:
                r=np.array([0.66937,0.84899])
                r1=np.array([0.065465,0.36077,0.25805,0.4326,0.30607,0.96659,0.12993,0.21744,0.89339,0.62171,0.39816,0.35609,0.64657,0.73309,0.7317,0.95818,0.045954,0.42436,0.0090175,0.70381,0.78089,0.56484,0.023295,0.0075639,0.98897,0.20165,0.82334,0.36095,0.46125,0.11005])
                r2=np.array([0.78126,0.45344,0.2971,0.3584,0.48244,0.43122,0.69882,0.67507,0.006871,0.07899,0.46063,0.77754,0.81676,0.63139,0.36488,0.8875,0.25093,0.066119,0.72715,0.7668,0.89833,0.76683,0.94688,0.53573,0.95978,0.97819,0.5221,0.84536,0.89803,0.93123])

            elif t==8 & m==2:
                r=np.array([0.45764,0.75916])
                r1=np.array([0.9388,0.8107,0.93039,0.44696,0.83389,0.98778,0.36964,0.17077,0.82317,0.58706,0.96161,0.48913,0.25352,0.67822,0.91449,0.61707,0.3225,0.49051,0.40746,0.08394,0.59196,0.87902,0.55331,0.29947,0.89701,0.79431,0.77581,0.59897,0.55722,0.29971])
                r2=np.array([0.54766,0.99183,0.48341,0.68477,0.48002,0.74652,0.21142,0.24849,0.097839,0.70867,0.85575,0.78903,0.74284,0.10452,0.52087,0.84663,0.84361,0.37775,0.2721,0.1253,0.69135,0.55513,0.0084742,0.41603,0.43912,0.78436,0.83,0.58961,0.14207,0.59331])

            elif t==9 & m==1:
                r=np.array([0.72619,0.42838])
                r1=np.array([0.21079,0.26538,0.99318,0.48076,0.82775,0.60324,0.81784,0.95555,0.65038,0.62765,0.64656,0.062133,0.9382,0.89872,0.69486,0.31041,0.34355,0.076229,0.51984,0.60878,0.72716,7.3934e-05,0.16977,0.46329,0.36185,0.95207,0.93219,0.95807,0.20654,0.1597])
                r2=np.array([0.57176,0.59292,0.69861,0.30581,0.39385,0.33689,0.12899,0.086936,0.54894,0.31773,0.99275,0.72357,0.5721,0.71723,0.97656,0.42699,0.91301,0.89731,0.83523,0.047958,0.35928,0.29575,0.62913,0.13618,0.37405,0.86478,0.25027,0.029506,0.99945,0.60514])

            elif t==9 & m==2:
                r=np.array([0.2442,0.4382])
                r1=np.array([0.73509,0.55799,0.43834,0.60354,0.181,0.80879,0.81906,0.48724,0.75505,0.40437,0.72568,0.15401,0.50907,0.66804,0.15258,0.062696,0.33711,0.44594,0.75765,0.13053,0.90151,0.22034,0.37855,0.42276,0.97269,0.17702,0.88228,0.55126,0.32149,0.89985])
                r2=np.array([0.54211,0.46289,0.80797,0.36082,0.971,0.55552,0.76982,0.68012,0.2052,0.83462,0.86547,0.041521,0.61419,0.27328,0.74671,0.48787,0.79238,0.52446,0.59751,0.22003,0.36402,0.29724,0.85162,0.97369,0.62362,0.89228,0.9809,0.64698,0.79882,0.40487])

            elif t==10 & m==1:
                r=np.array([0.48236,0.063892])
                r1=np.array([0.80293,0.35107,0.84927,0.99181,0.48432,0.35636,0.054371,0.91408,0.70497,0.43808,0.96811,0.72382,0.6568,0.51477,0.87706,0.060174,0.47148,0.31102,0.19469,0.15105,0.90142,0.070658,0.95839,0.69989,0.01201,0.0048804,0.85329,0.46729,0.83672,0.22062])
                r2=np.array([0.80596,0.24858,0.99827,0.9379,0.55396,0.9127,0.63549,0.7801,0.56722,0.19176,0.90625,0.51486,0.99898,0.37733,0.20611,0.72995,0.31344,0.11758,0.88861,0.69312,0.9399,0.41717,0.81577,0.80484,0.3604,0.91381,0.28832,0.165,0.45586,0.24282])

            elif t==10 & m==2:
                r=np.array([0.0019221,0.61534])
                r1=np.array([0.66123,0.66034,0.68048,0.85065,0.037314,0.68078,0.57114,0.69021,0.89557,0.26686,0.068555,0.3136,0.78918,0.49834,0.43703,0.16841,0.26456,0.68388,0.81664,0.70552,0.57654,0.99406,0.46119,0.49335,0.27396,0.6551,0.40706,0.29996,0.60544,0.79117])
                r2=np.array([0.97089,0.77338,0.59998,0.44907,0.15347,0.21123,0.70035,0.95618,0.63547,0.89127,0.21629,0.68354,0.31506,0.025387,0.82025,0.43267,0.088707,0.93508,0.39078,0.58793,0.23984,0.65357,0.36653,0.48125,0.40169,0.3338,0.26759,0.76784,0.24038,0.96128])

            elif t==11 & m==1:
                r=np.array([0.92355,0.27425])
                r1=np.array([0.22328,0.25212,0.24699,0.23958,0.42825,0.82593,0.61719,0.19387,0.80808,0.98563,0.1486,0.85303,0.2386,0.41694,0.3224,0.43404,0.32742,0.098969,0.67117,0.049359,0.201,0.49914,0.27542,0.4196,0.59699,0.049145,0.88668,0.8583,0.085062,0.17742])
                r2=np.array([0.013399,0.58999,0.70786,0.75892,0.21397,0.96617,0.48439,0.062468,0.17846,0.33826,0.88048,0.042721,0.35541,0.64074,0.82788,0.044623,0.79083,0.051151,0.29643,0.27214,0.91345,0.60547,0.50222,0.7366,0.11212,0.88449,0.52955,0.0054939,0.16287,0.26233])

            elif t==11 & m==2:
                r=np.array([0.03887,0.68206])
                r1=np.array([0.028196,0.49995,0.48069,0.27853,0.59049,0.28742,0.91995,0.0060638,0.56453,0.36869,0.37136,0.021194,0.68725,0.55456,0.76544,0.79134,0.24656,0.19981,0.36694,0.71957,0.12536,0.42989,0.016353,0.07102,0.71031,0.80295,0.9102,0.91212,0.62954,0.13149])
                r2=np.array([0.062137,0.77754,0.74215,0.62593,0.7291,0.20301,0.79499,0.97457,0.42014,0.24572,0.48012,0.66897,0.85238,0.94532,0.12873,0.69665,0.080084,0.10356,0.1312,0.51506,0.48178,0.44588,0.79818,0.52894,0.66884,0.48334,0.33269,0.2588,0.9737,0.26436])

            elif t==12 & m==1:
                r=np.array([0.78994,0.49707])
                r1=np.array([0.32079,0.61628,0.0068941,0.062934,0.92002,0.90616,0.83154,0.91367,0.67916,0.77706,0.69367,0.19886,0.45239,0.78889,0.0019245,0.55558,0.43325,0.058416,0.44196,0.83959,0.61826,0.74159,0.93564,0.32531,0.74599,0.8729,0.43329,0.52156,0.65266,0.46901])
                r2=np.array([0.1833,0.226,0.41196,0.015292,0.75067,0.062123,0.43168,0.54278,0.61015,0.43623,0.081069,0.28396,0.073227,0.72998,0.34638,0.65221,0.48176,0.38259,0.32689,0.10304,0.37041,0.37744,0.4818,0.79562,0.69139,0.84979,0.51228,0.85503,0.46544,0.26485])

            elif t==12 & m==2:
                r=np.array([0.62948,0.56273])
                r1=np.array([0.54116,0.39331,0.42046,0.13712,0.29218,0.0073232,0.9327,0.60926,0.89185,0.42082,0.40018,0.55393,0.59626,0.50628,0.58721,0.13282,0.7616,0.65114,0.35109,0.3126,0.27425,0.14953,0.33435,0.83303,0.23358,0.069241,0.49473,0.12215,0.40262,0.091214])
                r2=np.array([0.72055,0.34234,0.5663,0.65451,0.6525,0.70086,0.3011,0.085464,0.63344,0.26643,0.89425,0.30027,0.71506,0.33035,0.36487,0.59235,0.90519,0.26453,0.94983,0.73873,0.0044611,0.85074,0.69557,0.56243,0.33772,0.3328,0.077323,0.4583,0.65719,0.57195])

            elif t==13 & m==1:
                r=np.array([0.40211,0.9347])
                r1=np.array([0.36053,0.94771,0.030124,0.4411,0.70071,0.70299,0.51017,0.61224,0.74637,0.80144,0.33672,0.56409,0.85527,0.58916,0.50824,0.85343,0.6838,0.10634,0.50196,0.019167,0.44261,0.90718,0.04467,0.94519,0.18038,0.36991,0.20524,0.095586,0.43274,0.27756])
                r2=np.array([0.10086,0.49892,0.23903,0.3496,0.55826,0.54807,0.42127,0.3855,0.38066,0.28073,0.17991,0.12728,0.01569,0.75309,0.50496,0.72211,0.7611,0.26895,0.19362,0.064149,0.42537,0.70215,0.97732,0.55158,0.043807,0.58215,0.27838,0.54219,0.44332,0.11721])

            elif t==13 & m==2:
                r=np.array([0.37994,0.76483])
                r1=np.array([0.91837,0.6927,0.97062,0.12616,0.64641,0.38685,0.56234,0.19835,0.39393,0.34024,0.35648,0.37304,0.11536,0.50121,0.81691,0.34351,0.49854,0.11802,0.57552,0.51546,0.35528,0.86335,0.34401,0.45688,0.23809,0.77116,0.2734,0.525,0.53111,0.87338])
                r2=np.array([0.93761,0.048717,0.97884,0.63233,0.072634,0.21182,0.35989,0.42668,0.75815,0.91575,0.62974,0.95591,0.75512,0.52611,0.85011,0.81603,0.13213,0.76072,0.61723,0.39765,0.84127,0.03832,0.096206,0.9481,0.39602,0.53226,0.90364,0.34004,0.6639,0.72736])

            elif t==14 & m==1:
                r=np.array([0.22301,0.55545])
                r1=np.array([0.45523,0.61026,0.54399,0.51836,0.28605,0.87902,0.93654,0.80621,0.96908,0.52423,0.11287,0.65023,0.19089,0.85694,0.94285,0.10345,0.29644,0.79903,0.44171,0.49252,0.029516,0.57264,0.57246,0.74169,0.076606,0.78717,0.19349,0.53093,0.92413,0.98606])
                r2=np.array([0.97529,0.30477,0.75364,0.20636,0.86138,0.65784,0.10221,0.58046,0.96349,0.84487,0.75311,0.70305,0.24662,0.039941,0.46211,0.11737,0.16162,0.41976,0.66612,0.97315,0.27965,0.53139,0.93069,0.16666,0.78925,0.10297,0.88362,0.52224,0.97413,0.7561])

            elif t==14 & m==2:
                r=np.array([0.72257,0.0026012])
                r1=np.array([0.20561,0.26037,0.079955,0.73533,0.82265,0.34339,0.13614,0.66589,0.83044,0.67362,0.13946,0.37883,0.67836,0.51593,0.97806,0.26772,0.86691,0.37375,0.13663,0.082692,0.73882,0.37207,0.38052,0.30217,0.29453,0.25981,0.46348,0.98785,0.38508,0.94323])
                r2=np.array([0.167,0.925,0.75434,0.8566,0.60239,0.10737,0.45547,0.65459,0.057533,0.021263,0.2898,0.93148,0.51402,0.8753,0.3781,0.88451,0.53477,0.8926,0.10276,0.21205,0.70161,0.36135,0.0013957,0.38431,0.32014,0.39335,0.18125,0.20938,0.59372,0.59447])

            elif t==15 & m==1:
                r=np.array([0.17247,0.933])
                r1=np.array([0.056217,0.20172,0.50825,0.75921,0.14605,0.93107,0.42195,0.056499,0.6742,0.27981,0.78009,0.96284,0.68824,0.49842,0.099032,0.28775,0.53811,0.01133,0.28284,0.58957,0.17205,0.1701,0.67634,0.56959,0.55167,0.96744,0.62842,0.32455,0.52102,0.86494])
                r2=np.array([0.99411,0.83849,0.3474,0.74941,0.93941,0.66808,0.4812,0.28616,0.59516,0.33641,0.95955,0.44208,0.962,0.67638,0.70608,0.95769,0.93988,0.83376,0.15524,0.83043,0.46414,0.29869,0.52331,0.83163,0.53913,0.25983,0.35404,0.18674,0.35066,0.18972])

            elif t==15 & m==2:
                r=np.array([0.83569,0.38415])
                r1=np.array([0.0094997,0.30902,0.83675,0.28134,0.78134,0.53151,0.15391,0.52525,0.28324,0.71487,0.73439,0.44964,0.18208,0.13554,0.27277,0.63564,0.80619,0.66788,0.28659,0.14244,0.24588,0.6919,0.071747,0.49866,0.986,0.9049,0.57521,0.76652,0.74677,0.69533])
                r2=np.array([0.67732,0.2824,0.58187,0.61887,0.81424,0.015987,0.21435,0.98787,0.81734,0.63208,0.68215,0.80822,0.27966,0.66497,0.029324,0.54438,0.52897,0.87316,0.18761,0.93146,0.97635,0.3312,0.62371,0.52706,0.45908,0.35857,0.33427,0.083195,0.3904,0.23934])

            elif t==16 & m==1:
                r=np.array([0.48627,0.70009])
                r1=np.array([0.13727,0.82647,0.93005,0.82873,0.48495,0.65977,0.4564,0.41846,0.034296,0.92685,0.04338,0.47606,0.38575,0.53406,0.99817,0.90247,0.014755,0.78051,0.48529,0.39022,0.82309,0.87442,0.99836,0.19566,0.86997,0.30749,0.41124,0.81634,0.36825,0.42622])
                r2=np.array([0.091217,0.6675,0.73131,0.30082,0.338,0.73432,0.98546,0.69877,0.089932,0.47074,0.63536,0.52527,0.14134,0.27552,0.9871,0.795,0.93333,0.34837,0.20913,0.68037,0.35542,0.43837,0.90878,0.83359,0.39138,0.73398,0.29066,0.29214,0.2968,0.024842])

            elif t==16 & m==2:
                r=np.array([0.91784,0.68603])
                r1=np.array([0.23428,0.49735,0.79058,0.38023,0.21858,0.72267,0.77283,0.69328,0.61967,0.7623,0.51148,0.32941,0.0013441,0.58064,0.17184,0.19491,0.15032,0.50542,0.017387,0.47121,0.046077,0.44227,0.16356,0.5721,0.81832,0.085342,0.23284,0.24605,0.35193,0.40908])
                r2=np.array([0.11424,0.40721,0.67593,0.54302,0.35713,0.66159,0.6787,0.13156,0.43962,0.9372,0.57022,0.57764,0.7646,0.24695,0.69386,0.29486,0.5707,0.6348,0.39889,0.24888,0.93533,0.4489,0.53178,0.63484,0.66812,0.43901,0.17299,0.69438,0.92493,0.37061])

            elif t==17 & m==1:
                r=np.array([0.63879,0.88968])
                r1=np.array([0.48294,0.62982,0.46502,0.10917,0.11312,0.10789,0.44573,0.93885,0.63381,0.92967,0.062876,0.30694,0.94976,0.010364,0.16783,0.75527,0.83382,0.60586,0.51792,0.94286,0.74121,0.70108,0.74472,0.87383,0.96412,0.98192,0.91863,0.28348,0.058626,0.82099])
                r2=np.array([0.17952,0.034931,0.77133,0.54053,0.33154,0.57822,0.85451,0.64238,0.4201,0.54591,0.1823,0.23627,0.20541,0.25969,0.94263,0.64157,0.82906,0.38876,0.16841,0.74012,0.8728,0.35552,0.17883,0.99642,0.95913,0.156,0.92894,0.42457,0.22308,0.1364])

            elif t==17 & m==2:
                r=np.array([0.26018,0.54447])
                r1=np.array([0.082208,0.59813,0.029186,0.45491,0.3325,0.94367,0.3031,0.42822,0.66103,0.38109,0.13617,0.096627,0.30516,0.82388,0.62725,0.20593,0.98019,0.43777,0.8352,0.53918,0.025127,0.0068243,0.78609,0.44739,0.28874,0.86318,0.65623,0.28469,0.64457,0.26358])
                r2=np.array([0.17478,0.36862,0.53754,0.92641,0.74912,0.14774,0.0028877,0.12701,0.91692,0.67212,0.11379,0.96023,0.11938,0.49242,0.36131,0.47,0.05878,0.33001,0.26452,0.24592,0.94768,0.032442,0.90615,0.3685,0.66254,0.95362,0.094128,0.68532,0.41244,0.11179])

            elif t==18 & m==1:
                r=np.array([0.49184,0.46155])
                r1=np.array([0.87706,0.66024,0.27796,0.65717,0.64541,0.89722,0.88234,0.33517,0.427,0.80376,0.92309,0.86672,0.49965,0.58448,0.92476,0.16612,0.37436,0.25941,0.83048,0.070177,0.28103,0.55504,0.61897,0.40979,0.25843,0.41675,0.38206,0.096334,0.13128,0.6099])
                r2=np.array([0.65619,0.841,0.49982,0.3072,0.16976,0.048765,0.22582,0.36697,0.56785,0.56972,0.77878,0.59024,0.11066,0.64068,0.072019,0.36585,0.2873,0.74144,0.066987,0.75717,0.24071,0.23091,0.011988,0.13247,0.20939,0.21418,0.90579,0.27777,0.097102,0.78282])

            elif t==18 & m==2:
                r=np.array([0.66752,0.61267])
                r1=np.array([0.34379,0.69034,0.23356,0.30803,0.3573,0.2167,0.67728,0.73601,0.010019,0.35591,0.23995,0.92761,0.76299,0.37939,0.68596,0.69887,0.5904,0.96206,0.78135,0.53843,0.094138,0.88601,0.2575,0.46351,0.3308,0.75677,0.80285,0.80312,0.87664,0.087474])
                r2=np.array([0.66791,0.50242,0.33556,0.58856,0.35193,0.20672,0.26215,0.098649,0.15006,0.32102,0.59439,0.15374,0.062626,0.0077822,0.77426,0.68205,0.1205,0.71925,0.16185,0.12016,0.68115,0.14483,0.057828,0.13494,0.01478,0.18912,0.070862,0.03786,0.30787,0.51574])

            elif t==19 & m==1:
                r=np.array([0.39351,0.9952])
                r1=np.array([0.4396,0.15144,0.77805,0.74117,0.087644,0.47043,0.29283,0.40685,0.43024,0.87126,0.70725,0.014297,0.024584,0.23699,0.59827,0.9262,0.33441,0.44303,0.099138,0.71515,0.72164,0.78247,0.94205,0.047568,0.80035,0.46679,0.27914,0.044721,0.78755,0.89912])
                r2=np.array([0.77568,0.83745,0.34442,0.19119,0.37844,0.25633,0.021463,0.29328,0.24042,0.20259,0.34822,0.53715,0.12431,0.19274,0.48862,0.40701,0.73492,0.2999,0.80714,0.91366,0.76511,0.33421,0.71934,0.033593,0.61562,0.11218,0.050602,0.05521,0.02622,0.95544])

            elif t==19 & m==2:
                r=np.array([0.52521,0.75625])
                r1=np.array([0.58982,0.73891,0.31942,0.84813,0.49365,0.11484,0.81227,0.66683,0.38178,0.71881,0.41863,0.055933,0.585,0.29883,0.40956,0.58609,0.31562,0.14736,0.99153,0.10749,0.33426,0.037959,0.92241,0.37314,0.98916,0.54346,0.56332,0.1879,0.2155,0.48531])
                r2=np.array([0.2195,0.93687,0.27762,0.9531,0.81493,0.3496,0.021606,0.34101,0.3844,0.09329,0.96925,0.19004,0.16462,0.50703,0.50824,0.051478,0.36701,0.5848,0.99475,0.43513,0.696,0.016475,0.15254,0.89954,0.046376,0.029327,0.57444,0.3404,0.2193,0.90399])

            elif t==20 & m==1:
                r=np.array([0.68309,0.37165])
                r1=np.array([0.40112,0.20497,0.2377,0.88436,0.92124,0.78165,0.24192,0.5836,0.20186,0.12707,0.68767,0.91074,0.75094,0.82291,0.22512,0.38675,0.41869,0.93579,0.10555,0.53129,0.62119,0.28034,0.19776,0.40839,0.3626,0.1619,0.89353,0.44048,0.67031,0.21043])
                r2=np.array([0.47115,0.049914,0.49593,0.26972,0.68417,0.748,0.39164,0.55883,0.73225,0.61162,0.58123,0.070604,0.37425,0.03359,0.40614,0.65796,0.57524,0.97596,0.44164,0.77784,0.56946,0.0211,0.51227,0.40755,0.21984,0.23046,0.43855,0.91989,0.31904,0.28433])

            elif t==20 & m==2:
                r=np.array([0.36378,0.49932])
                r1=np.array([0.81352,0.23482,0.022264,0.30112,0.29806,0.82593,0.1364,0.81458,0.86109,0.55294,0.01853,0.50782,0.71365,0.69775,0.89346,0.70118,0.93729,0.010893,0.81974,0.034268,0.51616,0.65333,0.75413,0.28,0.60305,0.88878,0.64323,0.78606,0.49114,0.40346])
                r2=np.array([0.87744,0.70818,0.82649,0.01067,0.095557,0.54328,0.85622,0.26436,0.77555,0.63792,0.72506,0.89465,0.76799,0.20685,0.043304,0.15356,0.71831,0.12864,0.22079,0.45356,0.46526,0.089786,0.50673,0.076509,0.16652,0.74771,0.33457,0.30505,0.81888,0.98205])

        w = w_high - t * (w_high - w_low) / iterno # Linearly decreasing the value of 'w'.
        
        if show:
            db = dbest
            gbest_coords = xy_g[db]
            mult = ps[db][0]
            seg = f  # Segmenting 'f' into smaller partitions.
            len_f = len(f)
            
            # Subtracting the baseline.
            seg, base_line = norm_sig(seg)
            hseg = addimag(seg)
            hseg=np.reshape(hseg, (1, hseg.shape[0]))
            period = 1
            tt = np.linspace(0, 2 * np.pi, len(f) + 1)
            tt = tt[:len(f)]
            
            # Displaying the actual dbest dimension and multiplicities and lengths.
            print(f'Dbest dimension: {dbest}')
            print(f'Dbest multiplicities: {mult}')
            print(f'Dbest length: {len_f}')
            
            # Displaying the pole configuration of each particle in the dbest dimension.
            sz = np.zeros_like(xx[db])
            top_sz = 1
            for i in range(xx[db].shape[1]):
                if db == xd[i]:
                    sz[:, top_sz - 1] = xx[db][:, i]
                    top_sz += 1
            sz2=sz[:, :top_sz ]
            sz2=np.reshape(sz2, (sz2.size, 1))
            sz = array2complex(sz2).T

            # Calculating and quantizing the poles.
            mpoles = periodize_poles(multiply_poles(array2complex(gbest_coords).T, mult), period)
            mpoles_r = quant(mpoles, 'pole', eps)
            # Calculating the coefficients WITHOUT quantized poles.
            mpoles=np.reshape(mpoles, (1, mpoles.shape[0]))
            c = mt_coeffs(hseg, mpoles)
            #print(c)
            # Calculating the coefficients WITH quantized poles.
            mpoles_r=np.reshape(mpoles_r, (1, mpoles_r.shape[0]))
            c_r = mt_coeffs(hseg, mpoles_r)
            # Quantizing the coefficients.
            c_r = quant(c_r[0], 'coeff', eps)

            # Computing the error in terms of PRD.
            fs_r = mt_generate(len_f, mpoles_r, c_r)
            prd_r = 100 * np.sqrt(np.sum((seg - np.real(fs_r))**2) / np.sum((seg - np.mean(seg))**2))
            fs = mt_generate(len_f, mpoles, c[0])
            prd = 100 * np.sqrt(np.sum((seg - np.real(fs))**2) / np.sum((seg - np.mean(seg))**2))
            
            # Computing the compression ratio (CR).
            cn = np.sum(mult) * period  # number of complex coefficients
            pn = len(mult)
            cr = (2 * (cn + pn) / len_f) * 100

            #plt.clear()
            
            #plt.subplots(1, 2)
            unit_disc = np.exp(1j * tt)
            #plt.plot(unit_disc, 'k')
            plt.plot(unit_disc, 'k')
            plt.title(f'step: {t}')
            
            styles = ['bo', 'bx', 'b.', 'b+', 'bs', 'bv', 'bp', 'bh']
            styles_best = ['ro', 'rx', 'r.', 'r+', 'rs', 'rv', 'rp', 'rh']
            
            for j in range(len(mult)):
                #plt.plot(sz[j], styles[j])
                plt.plot(sz[j], styles[j])
            
            # Plotting the global best pole configuration in the dbest dimension.
            # Note: sudden changes on this figure indicate changes in the dbest dimension.
            for i in range(len(mult)):
                #plt.plot(array2complex(gbest_coords[i*2-1:i*2]), styles_best[i], markersize=15, linewidth=4)
                plt.plot(array2complex(gbest_coords[i*2-1:i*2]), styles_best[i], markersize=15, linewidth=4)
            
            
            # Displaying the rational approximation of the segment.
            #plt.subplot(1, 2, 1)
            #plt.plot(tt, np.real(hf), 'b', linewidth=4)
            ax[1].plot(tt, np.real(hf), 'b', linewidth=4)

            # plt.plot(tt[:len_f], np.real(seg) + base_line, 'g', linewidth=3)
            # plt.plot(tt[:len_f], np.real(fs) + base_line, 'r', linewidth=3)
            ax[1].plot(tt[:len_f], np.real(fs_r)[0] + base_line, 'r', linewidth=1)
            #plt.plot(tt[:len_f], np.real(fs_r)[0] + base_line, 'r', linewidth=1)
            
            #plt.legend(['Original signal', f'CR: {len_f / (2 * (cn + pn))}:1, PRD: {prd_r}'])
            ax[1].legend(['Original signal', f'CR: {len_f / (2 * (cn + pn))}:1, PRD: {prd_r}'])
            #plt.axis('tight')
            ax[1].axis('tight')
            plt.show()
    
    # Return the gbest poles and the quantized coefficients of the dbest dimension.
    m = ps[dbest][0]
    poles = array2complex(xy_g[dbest])
    for i in xy_g:
        print(i)
    print(dbest)
    #poles = np.array([0.56983-0.53516j,0.2911-0.23872j,0.35731-0.38266j])
    # Return dbest length.
    l = len(f)

    # Return the base_line.
    seg, bl = norm_sig(f[:l])
    #print(seg)
    #print(bl)
    hseg = addimag(seg)
    hseg = np.reshape(hseg, (1, len(hseg)))
    # Quantizing the poles.
    poles = quant(poles, 'pole', eps).T
    #print(poles)
    p = poles
    mpoles = periodize_poles(multiply_poles(poles, m), 1)
    mpoles=np.reshape(mpoles, (1, len(mpoles)))

    #print(hseg)
    #print(mpoles)
    # Calculating the coefficients WITH quantized poles.
    c = mt_coeffs(hseg, mpoles)
    #c=np.array([[-0.31837-1.0292j,0.74279-0.7174j,-0.92342+0.49661j,0.17082-0.012788j,0.39196+0.44898j,-0.0011643-0.20892j,0.21386-0.30793j,-0.0013584+0.090326j,-0.27444-0.10646j,0.012843+0.017184j,0.027309+0.15563j,0.047061-0.060691j,0.070276+0.010062j,-0.092831-0.037023j,0.0040963+0.015546j,-0.01169+0.040693j]])
    #print(c)
    # Quantizing the coefficients.
    c = quant(c[0], 'coeff', eps)
    #c=np.array([[-0.34356-1.0226j,0.75614-0.7016j,-0.91971+0.50085j,0.17301-0.0086347j,0.39597+0.44869j,-0.0053002-0.21253j,0.22063-0.30687j,-0.0021594+0.086587j,-0.27377-0.099644j,0.013789+0.01918j,0.027346+0.15509j,0.049094-0.061562j,0.070075+0.010562j,-0.094324-0.039761j,0.0042652+0.015159j,-0.010663+0.037899j]])
    #mpoles=np.array([[0.35714-0.61859j,0.35714-0.61859j,0.35714-0.61859j,0.35714-0.61859j,0.21429-0.37115j,0.21429-0.37115j,0.21429-0.37115j,0.21429-0.37115j,0.21429-0.37115j,0.21429-0.37115j,0.28571-0.49487j,0.28571-0.49487j,0.28571-0.49487j,0.28571-0.49487j,0.28571-0.49487j,0.28571-0.49487j]])
    #print(c)
    #print(l)
    #print(mpoles)
    # Calculating the PRD for 'f'.
    aprx = np.real(mt_generate(l, mpoles, c))
    #print(aprx)
    prd = 100 * np.sqrt(np.sum((seg - aprx) ** 2) / np.sum((seg - np.mean(seg)) ** 2))
    print('------------------')
    return p, c, m, dbest, l, bl, prd

# Computing the error function of a particle.
def error(hf, x, ps, alpha, eps):
    #print(hf)
    #print(x)
    #x=np.mean(x, axis=0)
    #print(ps)
    #print(np.mean(hf))
    #print(np.mean(x))
    #print(np.mean(ps))
    #exit(0)
    period = 1
    f = np.real(hf)
    if len(x.shape)<2:
        x=np.reshape(x, (x.shape[0], 1))
    #print("->",x.shape)
    
    err = np.zeros(x.shape[1])
    mult = ps.copy()
    #print(err)
    #print("mult", mult)
    length = len(f)
    seg = f.copy() # Segmenting 'f' into smaller partitions.

    # Subtracting the baseline
    seg, _ = norm_sig(seg)
    hseg = addimag(seg)
    #print("hseg:",hseg)
    #print(x.shape)
    #print(x)
    for i in range(x.shape[1]):
        #print(i,(x[:, i]))
        #print(i,array2complex(x[:, i]).T)
        if isinstance(mult[0], np.ndarray):
            mult=mult[0]
        poles = periodize_poles(multiply_poles(array2complex(x[:, i]).T, mult), period)
        
        # Quantizing the poles
        poles = quant(poles, 'pole', eps)
        poles=np.reshape(poles, (1, poles.shape[0]))
        # Computing the coefficients
        mts = mt_system(length, poles)
        #print(mts)
        #print(hseg.T.conj())
        
        co = (np.matmul(mts, hseg.T.conj()) / length).T.conj()
        #print(co)

        # Quantizing the coefficients
        co = quant(co, 'coeff', eps)
        
        # Computing the percentage root mean square difference (PRD)
        aprx = np.real(np.matmul(co, mts))
        #print(np.sqrt(np.sum((seg-aprx))**2))
        prd = 100 * np.sqrt(np.sum(np.power((seg - aprx), 2)) / np.sum(np.power((seg - np.mean(seg)), 2)))
        #print(seg - aprx)
        
        # Computing the compression ratio
        cn = np.sum(mult)
        pn = len(mult)
        cr = (2 * (cn + pn) / length) * 100
        
        err[i] = alpha * prd + (1 - alpha) * cr
        #print("co", err[i])
    #print(err)
    return err

# Converting inserted particles from struct array to cell array that is compatible with the polespace
def convert2ps(insparts, Dmax):
    inspos = [None] * Dmax
    for i in range(1, Dmax + 1):
        currentdim = [part for part in insparts if part['dim'] == i]
        if currentdim:
            polenum = currentdim[0]['poles'].shape[1]
            inspoles = np.hstack([part['poles'] for part in currentdim])
            inspos[i - 1] = np.zeros((2 * inspoles.shape[0], inspoles.shape[1]))
            inspos[i - 1][0::2, :] = np.real(inspoles)
            inspos[i - 1][1::2, :] = np.imag(inspoles)
    return inspos

# Computing the error function for all particles in their related dimensions (xd(a))
# Note: the particles may lie in different dimensions.
def errors_xd(hf, xx, xd, ps, s, alpha, eps):
    err = np.zeros(s)
    for a in range(s):
        err[a] = error(hf, xx[xd[a] - 1][:, a], ps[xd[a] - 1], alpha, eps)
    return err

# Computing the error function for all particles for a certain dimension 'd' (xx{d}, ps{d})
# Note: all particles have the same dimension.
def errors_d(hf, xx, ps, alpha, eps):
    return error(hf, xx, ps, alpha, eps)

# Computing the error function for all global best particles in each dimension
def errors_gd(hf, xy_g, ps, s, alpha, eps):
    err = np.zeros(len(ps))
    for d in range(len(ps)):
        err[d] = error(hf, xy_g[d], ps[d], alpha, eps)
    return err

# Generating r1 and r2 vectors for all dimensions
def rand_r1r2(ps):
    Dmax = len(ps)
    r1 = [None] * Dmax
    r2 = [None] * Dmax
    for i in range(Dmax):
        d = len(ps[i]) * 2
        r1[i] = np.random.rand(d, 1)
        r2[i] = np.random.rand(d, 1)
    return r1, r2

# Clamping operator for dimension velocities
def Cvd(vd, VDmin, VDmax):
    if vd < VDmin:
        return VDmin
    elif vd > VDmax:
        return VDmax
    else:
        return vd

# Clamping operator for dimensions
def Cxd(xd_prev, xd_next, Dmin, Dmax, PD, maxPD):
    if PD >= maxPD or xd_next < Dmin or xd_next > Dmax:
        return xd_prev
    else:
        return xd_next

# Converting an array of real numbers to an array of complex numbers
def array2complex(ar):
    if len(ar.shape)==1:
        ar=np.reshape(ar, (ar.shape[0], 1))

    z = np.zeros((ar.shape[0] // 2, ar.shape[1]), dtype=complex)
    for i in range(ar.shape[1]):
        for j in range(ar.shape[0] // 2):
            z[j, i] = ar[2 * j, i] + 1j * ar[2 * j + 1, i]
    
    z=np.reshape(z, (1, z.shape[0]))
    return z[0]

# Converting an array of complex numbers to an array of real numbers
def complex2array(z):
    ar = np.zeros((2 * len(z), 1))
    ar[0::2, 0] = np.real(z).flatten()
    ar[1::2, 0] = np.imag(z).flatten()
    return ar

# Computing the hyperbolic vector addition
def add(z1, z2):
    return (z1 + z2) / (1 + np.conj(z1) * z2)

# Quantizing the poles and the coefficients
def quant(data, roundmode, eps):
    if roundmode == 'pole':
        qr = 1 / (2 ** eps[0, 0] - 1)
        qphi = np.pi / (2 ** (eps[0, 1] - 1) - 1)
    else:
        qr = 1 / (2 ** eps[1, 0] - 1)
        qphi = np.pi / (2 ** (eps[1, 1] - 1) - 1)

    # Quantizing the angles
    data_phi = np.round(np.angle(data) / qphi) * qphi

    # Quantizing the absolute values
    data_r = np.round(np.abs(data) / qr) * qr
    if roundmode == 'pole':
        data_r[data_r >= 1] = 1 - 1e-6  # Necessary to satisfy abs(poles) < 1

    return data_r * np.exp(1j * data_phi)

"""
hf=np.array([-2.9918e-16+0.090638j,-0.03049+0.04861j,-0.030165+0.087977j,-0.076061+0.022376j,-0.029514+0.013453j,-0.060004-0.029843j,0.032765-0.085191j,0.079312-0.028085j,0.079637-0.039103j,0.157-0.021716j,0.15732+0.061776j,0.12683+0.087167j,0.080937+0.091676j,0.096669+0.048425j,0.096994+0.085955j,0.081912+0.03898j,0.11305+0.049523j,0.12878+0.0069098j,0.20615+0.07401j,0.12943+0.090913j,0.19139+0.049894j,0.20712+0.10544j,0.22285+0.1295j,0.19236+0.1771j,0.17728+0.16832j,0.1622+0.17247j,0.19334+0.16706j,0.16285+0.23403j,0.10155+0.17965j,0.14809+0.12868j,0.21005+0.15315j,0.19496+0.19726j,0.2261+0.17719j,0.24184+0.26113j,0.21135+0.24818j,0.25789+0.32402j,0.15037+0.37384j,0.13529+0.33385j,0.1048+0.35858j,0.074306+0.32429j,0.074631+0.32767j,0.028734+0.30461j,0.059874+0.24526j,0.091014+0.2728j,0.091339+0.25629j,0.13789+0.29924j,0.076581+0.34044j,0.061499+0.29867j,0.077232+0.3058j,0.062149+0.3154j,0.047067+0.30722j,0.031985+0.28984j,0.047717+0.24604j,0.094264+0.25868j,0.079182+0.26454j,0.12573+0.22809j,0.18768+0.28836j,0.15719+0.3272j,0.20374+0.32654j,0.20407+0.43928j,0.12735+0.45292j,0.11227+0.47267j,0.050968+0.47018j,0.035885+0.44782j,0.020803+0.41698j,0.051943+0.4138j,0.036861+0.418j,0.068+0.41192j,0.068325+0.45013j,0.053243+0.46545j,0.038161+0.46501j,0.053893+0.47935j,0.023403+0.51812j,-0.022493+0.50232j,-0.006761+0.46386j,0.0089713+0.51679j,-0.06774+0.48918j,-0.0057859+0.44274j,-0.0054608+0.48376j,0.010272+0.47601j,-0.0048107+0.50244j,0.026329+0.47115j,0.057469+0.54343j,0.026979+0.56478j,0.027304+0.60646j,-0.034+0.63246j,-0.06449+0.59467j,-0.03335+0.58899j,-0.06384+0.63457j,-0.10974+0.57198j,-0.032375+0.54077j,-0.016642+0.59054j,-0.00091014+0.57478j,0.061044+0.62797j,0.045962+0.70024j,0.015472+0.7416j,-0.015017+0.7413j,0.00071511+0.7692j,-0.045182+0.78756j,-0.029449+0.77977j,-0.059939+0.78741j,0.0020153+0.74096j,0.048562+0.81102j,0.079702+0.81803j,0.14166+0.90364j,0.14198+0.97065j,0.15771+1.0313j,0.18885+1.0807j,0.21999+1.1734j,0.25113+1.2308j,0.31309+1.3464j,0.35963+1.4292j,0.51403+1.5873j,0.62221+1.8707j,0.68416+2.2505j,0.60745+2.7181j,0.37667+3.2037j,-0.039006+3.6128j,-0.5009+3.8672j,-0.96279+4.0748j,-1.4863+4.2185j,-1.9944+4.2743j,-2.5334+4.3576j,-3.2264+4.3358j,-3.9194+4.0964j,-4.5353+3.7432j,-5.1359+3.2454j,-5.5208+2.5566j,-5.6899+1.9629j,-5.8128+1.4018j,-5.8433+0.91063j,-5.8892+0.44644j,-5.8735-0.0017252j,-5.8732-0.41553j,-5.8728-0.86334j,-5.8109-1.3801j,-5.6257-1.8625j,-5.3942-2.3206j,-5.0396-2.6854j,-4.7465-2.9244j,-4.4534-3.1781j,-4.145-3.351j,-3.8981-3.5015j,-3.6205-3.6837j,-3.312-3.7597j,-3.1114-3.8188j,-2.9107-3.913j,-2.7255-4.04j,-2.4633-4.1655j,-2.2318-4.2519j,-1.9388-4.3633j,-1.6457-4.3697j,-1.4143-4.4106j,-1.0904-4.4814j,-0.7049-4.4196j,-0.39643-4.2738j,-0.11877-4.0861j,0.081847-3.8371j,0.15921-3.5677j,0.12872-3.4233j,0.15986-3.3456j,0.17559-3.3085j,0.28377-3.2767j,0.34572-3.2181j,0.48471-3.1685j,0.54667-3.0514j,0.67025-2.9859j,0.70139-2.7746j,0.65549-2.7421j,0.71745-2.6505j,0.65614-2.5781j,0.67188-2.5948j,0.70302-2.5474j,0.70334-2.5468j,0.76529-2.5384j,0.79643-2.5239j,0.90461-2.5078j,0.95116-2.3893j,0.93607-2.336j,0.9364-2.3173j,0.98295-2.2815j,0.93705-2.2243j,0.95278-2.2823j,0.98392-2.2452j,0.99965-2.2867j,1.0462-2.2652j,1.0773-2.3231j,1.1855-2.2952j,1.2167-2.3031j,1.3402-2.2738j,1.3714-2.2186j,1.4487-2.1841j,1.4645-2.1238j,1.511-2.1114j,1.5422-2.0592j,1.5425-2.0459j,1.5736-2.0991j,1.7126-2.1076j,1.79-2.045j,1.8827-2.0064j,1.9293-1.9382j,2.0375-1.9314j,2.1456-1.7854j,2.1614-1.6938j,2.2079-1.5724j,2.162-1.4853j,2.1778-1.4472j,2.1627-1.3686j,2.1322-1.3661j,2.1787-1.363j,2.1945-1.3133j,2.2102-1.3249j,2.2722-1.3162j,2.3495-1.3134j,2.4577-1.2596j,2.5659-1.1848j,2.6278-1.0058j,2.5665-0.94595j,2.6439-0.90114j,2.6288-0.81488j,2.6908-0.82178j,2.7989-0.72949j,2.8455-0.60472j,2.892-0.54782j,3.031-0.38553j,3.0005-0.19011j,3.0471-0.054548j,2.9704+0.17406j,2.8936+0.24546j,2.8478+0.36948j,2.8019+0.44321j,2.756+0.55527j,2.7255+0.62997j,2.6642+0.75527j,2.6337+0.80048j,2.6032+0.96493j,2.5111+1.0274j,2.496+1.1759j,2.3422+1.2947j,2.2655+1.3609j,2.1426+1.4747j,2.0042+1.5233j,1.8967+1.5802j,1.743+1.6289j,1.62+1.627j,1.4817+1.6295j,1.4204+1.5693j,1.3591+1.6366j,1.2362+1.6155j,1.1749+1.6482j,1.0365+1.645j,0.9444+1.6331j,0.83687+1.5971j,0.74475+1.6028j,0.591+1.5179j,0.56051+1.4424j,0.46839+1.389j,0.4225+1.3142j,0.36119+1.2115j,0.40774+1.1466j,0.36184+1.1292j,0.37758+1.0713j,0.34709+1.0724j,0.332+1.0331j,0.30152+1.0169j,0.28643+1.0069j,0.19431+0.98184j,0.17923+0.89539j,0.13333+0.84397j,0.16447+0.73939j,0.18021+0.72088j,0.21135+0.66712j,0.21167+0.65167j,0.28903+0.59843j,0.28936+0.68762j,0.25887+0.61986j,0.30542+0.66415j,0.24411+0.66309j,0.22903+0.64466j,0.21395+0.60169j,0.21427+0.60308j,0.18378+0.5413j,0.23033+0.5145j,0.23065+0.49276j,0.2772+0.473j,0.30834+0.4866j,0.32407+0.52114j,0.30899+0.53914j,0.29391+0.55592j,0.27883+0.54905j,0.26374+0.58265j,0.18703+0.56237j,0.17195+0.49713j,0.18768+0.44873j,0.21882+0.42427j,0.24996+0.41884j,0.25029+0.42117j,0.29683+0.38591j,0.34338+0.45542j,0.31289+0.49119j,0.26699+0.51737j,0.25191+0.45422j,0.28305+0.5138j,0.19093+0.47543j,0.25289+0.44849j,0.19158+0.45834j,0.23813+0.37542j,0.28468+0.41687j,0.285+0.42159j,0.31614+0.44278j,0.30106+0.4991j,0.27057+0.48803j,0.2863+0.53931j,0.17878+0.55593j,0.16369+0.48351j,0.16402+0.4655j,0.17975+0.45583j,0.13385+0.45503j,0.14959+0.36956j,0.21154+0.37743j,0.22727+0.37989j,0.27382+0.40768j,0.25874+0.46257j,0.24366+0.47346j,0.21317+0.50906j,0.18268+0.47753j,0.19841+0.51732j,0.10629+0.5165j,0.10662+0.46166j,0.076126+0.44472j,0.10727+0.37701j,0.13841+0.40165j,0.13873+0.37469j,0.20068+0.4j,0.1702+0.46761j,0.1243+0.45689j,0.10922+0.4499j,0.094134+0.43075j,0.094459+0.43285j,0.06397+0.42434j,0.048887+0.39569j,0.049212+0.34905j,0.095759+0.32957j,0.11149+0.34404j,0.12722+0.34297j,0.14296+0.36689j,0.12787+0.37552j,0.15901+0.38085j,0.12852+0.44971j,0.082627+0.41482j,0.082952+0.44612j,0.0062409+0.40277j,0.052788+0.36474j,0.022298+0.3751j,0.038031+0.32205j,0.06917+0.33155j,0.069495+0.33491j,0.10064+0.33026j,0.10096+0.40857j,0.0088413+0.37847j,0.070796+0.34441j,0.024899+0.4144j,-0.036405+0.34713j,-0.0052658+0.30447j,-0.0049407+0.30573j,-0.0046157+0.24918j,0.072746+0.25246j,0.057664+0.28916j,0.073396+0.27587j,0.073721+0.29178j,0.10486+0.28999j,0.10519+0.36079j,0.028474+0.37344j,0.013392+0.30925j,0.059939+0.33075j,-0.0013652+0.35653j,-0.016447+0.31287j,-0.03153+0.28811j,-0.00039006+0.25125j,-6.501e-05+0.25354j,0.046482+0.22145j,0.062214+0.28508j,0.031725+0.26593j,0.062864+0.28066j,0.032375+0.30502j,0.017293+0.28778j,0.017618+0.29114j,-0.012872+0.28607j,-0.012547+0.25007j,-0.012222+0.24477j,-0.011897+0.19657j,0.050057+0.17914j,0.081197+0.20475j,0.11234+0.22727j,0.11266+0.28635j,0.082172+0.29699j,0.082497+0.32357j,0.0366+0.33788j,0.021518+0.33593j,-0.024379+0.33186j,-0.039461+0.30353j,-0.06995+0.26422j,-0.023403+0.2221j,-0.038486+0.22977j,0.023469+0.1688j,0.054608+0.26571j,-0.006696+0.23123j,0.055258+0.22531j,0.055583+0.27526j,0.0096864+0.30383j,-0.0053958+0.25436j,0.010337+0.3026j,-0.066375+0.25521j,-0.0044207+0.23308j,-0.050318+0.22663j,0.027044+0.18264j,0.027369+0.23811j,0.058509+0.23543j,0.028019+0.2992j,0.028344+0.27604j,-0.0021453+0.34459j,-0.048042+0.29992j,-0.063124+0.33655j,-0.13984+0.26826j,-0.093289+0.22808j,-0.10837+0.22865j,-0.12345+0.19577j,-0.10772+0.1174j,0.00045507+0.11054j,0.016187+0.17928j,0.016512+0.18389j,0.032245+0.22767j,0.0017553+0.24377j,0.017488+0.27783j,-0.074631+0.32558j,-0.12053+0.2539j,-0.13561+0.2288j,-0.11988+0.16593j,-0.10415+0.17075j,-0.073006+0.12763j,-0.057274+0.18657j,-0.087763+0.12684j,-0.010402+0.14799j,-0.025484+0.17876j,-0.025159+0.22322j,-0.086463+0.21829j,-0.086138+0.22364j,-0.16285+0.21495j,-0.19334+0.14189j,-0.17761+0.050874j,-0.10024+0.019543j,-0.053698+0.0072322j,0.0082562+0.039238j,0.023989+0.056466j,0.055128+0.12065j,0.0092314+0.12065j,0.071186+0.16036j,-0.020933+0.2338j,-0.06683+0.19198j,-0.11273+0.16276j,-0.096994+0.093619j,-0.065855+0.077516j,-0.034715+0.083176j,-0.049797+0.079474j,-0.0032505+0.04934j,0.043296+0.095937j,0.012807+0.16595j,-0.048497+0.1217j,0.013457+0.12759j,-0.047847+0.16516j,-0.047522+0.14655j,-0.12423+0.1449j,-0.1085+0.050539j,-0.092769+0.027172j,-4.7868e-16-0.010798j])
xx=np.array([[0.5888,0.50574,0.36562,0.472,-0.0092529,-0.76385,0.33813,0.56706,0.13394,-0.58606,0.21208,-0.34684,-0.7481,0.047943,0.15349,-0.065834,0.43469,-0.93247,-0.29788,-0.0081064,0.030642,0.01624,0.13615,0.24573,-0.61368,0.04302,0.099045,0.14684,-0.31885,-0.046841]
            ,[0.4666,0.01473,-0.81242,0.27688,0.14901,0.35119,0.74076,0.73619,-0.14391,-0.18985,-0.28051,0.47142,0.53065,0.75568,0.34811,0.037679,-0.30462,0.053585,0.48459,0.0087147,-0.15926,0.31079,0.094357,-0.093648,-0.3137,0.44848,-0.20645,0.040692,-0.43376,-0.062588]
            ,[0.24782,0.10897,0.65092,-0.11204,0.07968,0.21525,-0.021094,0.22968,-0.22025,0.29019,-0.59825,-0.54782,0.25389,0.53857,0.035823,0.051346,0.73275,-0.12961,0.37984,0.25813,-0.61118,-0.4351,0.40661,0.62939,0.69599,-0.050605,0.90906,0.40242,-0.11415,-0.4218]
            ,[-0.060488,-0.69053,-0.70466,0.081634,-0.24487,-0.13538,0.24261,0.26407,-0.12055,0.37389,-0.57651,-0.045711,0.13131,0.52731,0.56669,0.01656,-0.26491,0.0087656,-0.27577,0.21685,0.5073,0.30006,0.4439,-0.178,0.27445,0.066822,0.088257,0.72113,-0.98957,0.13435]])
ps=np.array([2,4])
alpha=0.5
acc = np.array([[3, 3], [7, 7], [8, 8]])
print(error(hf,xx,ps,alpha, acc))
"""