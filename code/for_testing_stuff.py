import numpy as np


def quant(data, roundmode, eps):
    if roundmode == "pole":
        qr = 1 / (2 ** eps[0, 0] - 1)
        qphi = np.pi / (2 ** (eps[0, 1] - 1) - 1)
    else:
        qr = 1 / (2 ** eps[1, 0] - 1)
        qphi = np.pi / (2 ** (eps[1, 1] - 1) - 1)

    # Quantizing the angles
    data_phi = np.round(np.angle(data) / qphi) * qphi

    # Quantizing the absolute values
    data_r = np.round(np.abs(data) / qr) * qr
    if roundmode == "pole":
        data_r[data_r >= 1] = 1 - 1e-6  # Necessary to satisfy abs(poles) < 1

    return data_r * np.exp(1j * data_phi)

def array2complex(ar):
    if len(ar.shape)==1:
        ar=np.reshape(ar, (ar.shape[0], 1))
    ###print(ar)
    ###print("shape",(ar.shape))

    z = np.zeros((ar.shape[0] // 2, ar.shape[1]), dtype=complex)
    ###print(z)
    for i in range(ar.shape[1]):
        for j in range(ar.shape[0] // 2):
            z[j, i] = ar[2 * j, i] + 1j * ar[2 * j + 1, i]
    ###print(z)
    z=np.reshape(z, (1, len(z)))
    ###print("ujforma:",z)
    return z[0]


poles = [
    0.5888 + 0.4666j,
    0.5888 + 0.4666j,
    0.24782 - 0.060488j,
    0.24782 - 0.060488j,
    0.24782 - 0.060488j,
    0.24782 - 0.060488j,
]

#print(quant(poles, 'pole', np.array([[3,3],[7,7],[8,8]])))

from Rational.rait.addimag import addimag
from Rational.rait.multiply_poles import multiply_poles
from Rational.rait.periodize_poles import periodize_poles

seg=[0,-0.03049,-0.030165,-0.076061,-0.029514,-0.060004,0.032765,0.079312,0.079637,0.157,0.15732,0.12683,0.080937,0.096669,0.096994,0.081912,0.11305,0.12878,0.20615,0.12943,0.19139,0.20712,0.22285,0.19236,0.17728,0.1622,0.19334,0.16285,0.10155,0.14809,0.21005,0.19496,0.2261,0.24184,0.21135,0.25789,0.15037,0.13529,0.1048,0.074306,0.074631,0.028734,0.059874,0.091014,0.091339,0.13789,0.076581,0.061499,0.077232,0.062149,0.047067,0.031985,0.047717,0.094264,0.079182,0.12573,0.18768,0.15719,0.20374,0.20407,0.12735,0.11227,0.050968,0.035885,0.020803,0.051943,0.036861,0.068,0.068325,0.053243,0.038161,0.053893,0.023403,-0.022493,-0.006761,0.0089713,-0.06774,-0.0057859,-0.0054608,0.010272,-0.0048107,0.026329,0.057469,0.026979,0.027304,-0.034,-0.06449,-0.03335,-0.06384,-0.10974,-0.032375,-0.016642,-0.00091014,0.061044,0.045962,0.015472,-0.015017,0.00071511,-0.045182,-0.029449,-0.059939,0.0020153,0.048562,0.079702,0.14166,0.14198,0.15771,0.18885,0.21999,0.25113,0.31309,0.35963,0.51403,0.62221,0.68416,0.60745,0.37667,-0.039006,-0.5009,-0.96279,-1.4863,-1.9944,-2.5334,-3.2264,-3.9194,-4.5353,-5.1359,-5.5208,-5.6899,-5.8128,-5.8433,-5.8892,-5.8735,-5.8732,-5.8728,-5.8109,-5.6257,-5.3942,-5.0396,-4.7465,-4.4534,-4.145,-3.8981,-3.6205,-3.312,-3.1114,-2.9107,-2.7255,-2.4633,-2.2318,-1.9388,-1.6457,-1.4143,-1.0904,-0.7049,-0.39643,-0.11877,0.081847,0.15921,0.12872,0.15986,0.17559,0.28377,0.34572,0.48471,0.54667,0.67025,0.70139,0.65549,0.71745,0.65614,0.67188,0.70302,0.70334,0.76529,0.79643,0.90461,0.95116,0.93607,0.9364,0.98295,0.93705,0.95278,0.98392,0.99965,1.0462,1.0773,1.1855,1.2167,1.3402,1.3714,1.4487,1.4645,1.511,1.5422,1.5425,1.5736,1.7126,1.79,1.8827,1.9293,2.0375,2.1456,2.1614,2.2079,2.162,2.1778,2.1627,2.1322,2.1787,2.1945,2.2102,2.2722,2.3495,2.4577,2.5659,2.6278,2.5665,2.6439,2.6288,2.6908,2.7989,2.8455,2.892,3.031,3.0005,3.0471,2.9704,2.8936,2.8478,2.8019,2.756,2.7255,2.6642,2.6337,2.6032,2.5111,2.496,2.3422,2.2655,2.1426,2.0042,1.8967,1.743,1.62,1.4817,1.4204,1.3591,1.2362,1.1749,1.0365,0.9444,0.83687,0.74475,0.591,0.56051,0.46839,0.4225,0.36119,0.40774,0.36184,0.37758,0.34709,0.332,0.30152,0.28643,0.19431,0.17923,0.13333,0.16447,0.18021,0.21135,0.21167,0.28903,0.28936,0.25887,0.30542,0.24411,0.22903,0.21395,0.21427,0.18378,0.23033,0.23065,0.2772,0.30834,0.32407,0.30899,0.29391,0.27883,0.26374,0.18703,0.17195,0.18768,0.21882,0.24996,0.25029,0.29683,0.34338,0.31289,0.26699,0.25191,0.28305,0.19093,0.25289,0.19158,0.23813,0.28468,0.285,0.31614,0.30106,0.27057,0.2863,0.17878,0.16369,0.16402,0.17975,0.13385,0.14959,0.21154,0.22727,0.27382,0.25874,0.24366,0.21317,0.18268,0.19841,0.10629,0.10662,0.076126,0.10727,0.13841,0.13873,0.20068,0.1702,0.1243,0.10922,0.094134,0.094459,0.06397,0.048887,0.049212,0.095759,0.11149,0.12722,0.14296,0.12787,0.15901,0.12852,0.082627,0.082952,0.0062409,0.052788,0.022298,0.038031,0.06917,0.069495,0.10064,0.10096,0.0088413,0.070796,0.024899,-0.036405,-0.0052658,-0.0049407,-0.0046157,0.072746,0.057664,0.073396,0.073721,0.10486,0.10519,0.028474,0.013392,0.059939,-0.0013652,-0.016447,-0.03153,-0.00039006,-6.501e-05,0.046482,0.062214,0.031725,0.062864,0.032375,0.017293,0.017618,-0.012872,-0.012547,-0.012222,-0.011897,0.050057,0.081197,0.11234,0.11266,0.082172,0.082497,0.0366,0.021518,-0.024379,-0.039461,-0.06995,-0.023403,-0.038486,0.023469,0.054608,-0.006696,0.055258,0.055583,0.0096864,-0.0053958,0.010337,-0.066375,-0.0044207,-0.050318,0.027044,0.027369,0.058509,0.028019,0.028344,-0.0021453,-0.048042,-0.063124,-0.13984,-0.093289,-0.10837,-0.12345,-0.10772,0.00045507,0.016187,0.016512,0.032245,0.0017553,0.017488,-0.074631,-0.12053,-0.13561,-0.11988,-0.10415,-0.073006,-0.057274,-0.087763,-0.010402,-0.025484,-0.025159,-0.086463,-0.086138,-0.16285,-0.19334,-0.17761,-0.10024,-0.053698,0.0082562,0.023989,0.055128,0.0092314,0.071186,-0.020933,-0.06683,-0.11273,-0.096994,-0.065855,-0.034715,-0.049797,-0.0032505,0.043296,0.012807,-0.048497,0.013457,-0.047847,-0.047522,-0.12423,-0.1085,-0.092769,0]

#print(addimag(np.array(seg)))

a=np.array([0.4832,0.090415,0.24194,-0.40237,0.3933,-0.48214])
period=1
mult=np.array([6,8,8])

p=periodize_poles(multiply_poles(array2complex(a), mult), period)
print(p)