import numpy as np
import scipy.io as sio
import matplotlib.pyplot as plt
from B_spline.compress import compress
from B_spline.decompress import decompress

ecg_dbdir = 'data/'
rec_name = 'PhysioNet_MITBIH_rec119_5min.mat'

## Loading an ECG record.
# Example: Loading ECG record (replace with actual loading code)
# load([ecg_dbdir,rec_name],'beats','ecg')

mat_contents = sio.loadmat(ecg_dbdir + rec_name)
beats = mat_contents['beats']

## Setting parameters.%
order = 4
prd_limit = 8.0
acc = [8, 8]
show = True  # Displays each step of the optimization.

## Adaptive representation of a heartbeat in an ECG record. 
signal=beats[0][0]
M = len(signal)
signal = np.reshape(signal, (1, M))  # signal should be a row vector.
init_knot = np.arange(1, M+1, 2)  # initial knots
s, knots, coeff, prd = compress(signal, order, prd_limit, init_knot, show)
"""
s=np.array([0,0.01454,0.028337,0.041406,0.05376,0.065416,0.076385,0.086684,0.096326,0.10533,0.1137,0.12146,0.12861,0.13519,0.14119,0.14664,0.15154,0.15592,0.15978,0.16315,0.16603,0.16843,0.17039,0.1719,0.17298,0.17365,0.17393,0.17381,0.17333,0.17249,0.17132,0.16981,0.16799,0.16587,0.16347,0.1608,0.15787,0.15471,0.15131,0.1477,0.1439,0.13991,0.13575,0.13144,0.12698,0.1224,0.11771,0.11292,0.10805,0.10311,0.098108,0.09307,0.088006,0.08293,0.077857,0.072801,0.067776,0.062796,0.057877,0.053031,0.048274,0.04362,0.039084,0.034678,0.030419,0.02632,0.022395,0.01866,0.015127,0.011812,0.0087291,0.0058923,0.0033159,0.0010145,-0.00099781,-0.0027066,-0.0040974,-0.0051561,-0.0058683,-0.0062196,-0.0061957,-0.0057823,-0.0049651,-0.0037296,-0.0020617,5.3091e-05,0.0026291,0.0056805,0.0092219,0.013267,0.017831,0.022928,0.028572,0.034778,0.041559,0.04893,0.056906,0.065501,0.074729,0.084605,0.095142,0.10636,0.11826,0.13087,0.1442,0.15826,0.17307,0.18864,0.20499,0.22212,0.24007,0.25883,0.27843,0.29538,0.29224,0.24807,0.14192,-0.047136,-0.34005,-0.74971,-1.2568,-1.834,-2.454,-3.0893,-3.7128,-4.2969,-4.8144,-5.2434,-5.5836,-5.8404,-6.0189,-6.1245,-6.1624,-6.1378,-6.056,-5.9223,-5.7419,-5.5201,-5.2621,-4.9731,-4.6585,-4.3235,-3.9733,-3.6132,-3.2485,-2.8844,-2.5261,-2.1789,-1.8481,-1.539,-1.2567,-1.0065,-0.79376,-0.62181,-0.48683,-0.38315,-0.3051,-0.24701,-0.20321,-0.16803,-0.1358,-0.10181,-0.065203,-0.0261,0.01539,0.059158,0.10509,0.15308,0.20301,0.25477,0.30826,0.36335,0.41994,0.47792,0.53717,0.59759,0.65906,0.72147,0.78471,0.84867,0.91324,0.9783,1.0437,1.1095,1.1754,1.2413,1.3072,1.3729,1.4383,1.5033,1.5678,1.6317,1.6949,1.7572,1.8186,1.879,1.9381,1.996,2.0524,2.1074,2.1607,2.2124,2.2621,2.3099,2.3557,2.3993,2.4406,2.4795,2.5158,2.5496,2.5806,2.6088,2.6341,2.6562,2.6752,2.6909,2.7032,2.712,2.7172,2.7186,2.7162,2.7099,2.6994,2.6848,2.6659,2.6426,2.6148,2.5824,2.5452,2.5033,2.4568,2.4061,2.3515,2.2934,2.2319,2.1676,2.1006,2.0313,1.9601,1.8871,1.8128,1.7375,1.6615,1.585,1.5085,1.4322,1.3565,1.2816,1.208,1.1358,1.0655,0.9973,0.93158,0.86863,0.80878,0.75234,0.69964,0.65099,0.6067,0.567,0.53169,0.50048,0.47309,0.44921,0.42857,0.41086,0.3958,0.38309,0.37244,0.36357,0.35618,0.34997,0.34467,0.33997,0.33558,0.33127,0.32698,0.32272,0.31848,0.31426,0.31007,0.3059,0.30175,0.29763,0.29353,0.28946,0.28541,0.28138,0.27738,0.27341,0.26945,0.26553,0.26162,0.25774,0.25389,0.25006,0.24625,0.24247,0.23871,0.23498,0.23127,0.22759,0.22393,0.2203,0.21669,0.21311,0.20955,0.20602,0.20251,0.19902,0.19557,0.19213,0.18873,0.18534,0.18199,0.17865,0.17535,0.17207,0.16881,0.16558,0.16238,0.1592,0.15605,0.15292,0.14982,0.14674,0.14369,0.14067,0.13767,0.13469,0.13175,0.12883,0.12593,0.12306,0.12022,0.11741,0.11462,0.11185,0.10911,0.1064,0.10372,0.10106,0.098429,0.095823,0.093245,0.090693,0.088167,0.085669,0.083197,0.080752,0.078333,0.075942,0.073577,0.071239,0.068929,0.066645,0.064388,0.062159,0.059957,0.057781,0.055634,0.053513,0.05142,0.049354,0.047315,0.045304,0.04332,0.041364,0.039436,0.037535,0.035662,0.033816,0.031998,0.030208,0.028446,0.026712,0.025006,0.023327,0.021677,0.020054,0.01846,0.016894,0.015356,0.013846,0.012364,0.010911,0.0094861,0.0080895,0.0067214,0.0053817,0.0040705,0.0027878,0.0015338,0.00030833,-0.00088844,-0.0020565,-0.0031958,-0.0043063,-0.005388,-0.0064407,-0.0074646,-0.0084595,-0.0094254,-0.010362,-0.01127,-0.012149,-0.012998,-0.013818,-0.014609,-0.015371,-0.016103,-0.016806,-0.017479,-0.018123,-0.018738,-0.019323,-0.019878,-0.020404,-0.0209,-0.021366,-0.021803,-0.022209,-0.022586,-0.022933,-0.02325,-0.023537,-0.023794,-0.024021,-0.024218,-0.024385,-0.024521,-0.024628,-0.024704,-0.024749,-0.024765,-0.02475,-0.024704,-0.024628,-0.024522,-0.024385,-0.024217,-0.024018,-0.023789,-0.02353,-0.023239,-0.022918,-0.022565,-0.022182,-0.021768,-0.021323,-0.020847,-0.02034,-0.019801,-0.019232,-0.018631,-0.017999,-0.017336,-0.016642,-0.015916,-0.015158,-0.014369,-0.013549,-0.012697,-0.011814,-0.010899,-0.0099522,-0.0089738,-0.0079637,-0.0069217,-0.0058479,-0.0047423,-0.0036047,-0.0024351,-0.0012336,0])
knots=np.array([1,113,119,127,153,161,229,259,275,475])
knots=knots-1
coeff=np.array([0,0.556861,-0.523889,0.423759,-10.9229,-0.469466,0.270353,4.69439,0.427853,0.0577529,-0.0833088,0])
"""

s, prd = decompress(signal[0], knots, coeff, order, [signal[0, 0], signal[0, -1]], show)

## Plotting the original ECG and the reconstructed signal.
#fig, axes = plt.subplots(1, 2, figsize=(13, 6))
x = np.arange(M)
plt.figure()
plt.gca().set_aspect('auto', adjustable='box')
plt.plot(x, signal.flatten(), 'b', label='Original Signal')
plt.plot(x, s, 'r', linewidth=2, label='Approximation')
plt.stem(knots-1, s[knots-1], 'r.')
plt.grid(True)
plt.legend()
plt.ylim(-6, 6)

plt.savefig('results/bspline_signal_approx.png')

## Displaying statistical informations.
print('------------------- B-spline approximation -------------------')
print(f'The approximation error in the sense of PRD: {prd:.2f} %')
print(f'Order of the B-splines: {order}')
print(f'Number of knots: {len(knots)}')

plt.show()