from Hermite.hermite_recbeat import hermite_recbeat
import numpy as np
import numpy.testing as npt
from scipy.sparse import csr_matrix

def test_1():        
    
    co_data = [
        [-0.1725, -0.2510],
        [-3.1294, -2.2196, -0.5333, -1.3412, -0.0471, -0.8392, 0.1333],
        [5.5843, -3.3333, 4.6353, -3.1843, 2.1961, -0.7373]
    ]
    co_sparse = [csr_matrix(c).T for c in co_data]

    tk_data = [
        list(range(-56, 56)),
        list(range(-14, 14)),
        list(range(-168, 169))
    ]
    tk_sparse = [csr_matrix(t).T for t in tk_data]

    bm = np.array([[112, 56], [28, 14], [337, 169]])
    la = np.array([0.42971,0.75327,-4.6547,0.27564])
    b = np.array([31.6,3.7,52.3])

    expecting=np.array([0.50102,0.50616,0.51124,0.51626,0.52119,0.52604,0.53078,0.53541,0.5399,0.54426,0.54846,0.55249,0.55634,0.55999,0.56344,0.56666,0.56965,0.57239,0.57487,0.57708,0.57901,0.58065,0.58199,0.58302,0.58373,0.58413,0.5842,0.58393,0.58334,0.58241,0.58114,0.57954,0.57761,0.57535,0.57277,0.56988,0.56668,0.56318,0.5594,0.55535,0.55105,0.5465,0.54172,0.53674,0.53158,0.52625,0.52077,0.51517,0.50948,0.50371,0.49788,0.49204,0.48619,0.48038,0.47461,0.46892,0.46334,0.45789,0.45259,0.44747,0.44256,0.43787,0.43343,0.42926,0.42538,0.42181,0.41857,0.41568,0.41314,0.41097,0.40919,0.40781,0.40682,0.40625,0.4061,0.40636,0.40705,0.40817,0.4097,0.41165,0.41402,0.4168,0.41998,0.42355,0.42751,0.43184,0.43653,0.44156,0.44693,0.45262,0.45861,0.46488,0.47142,0.47822,0.48524,0.49248,0.49991,0.50752,0.51529,0.5232,0.53123,0.53937,0.54759,0.55588,0.56422,0.57259,0.58098,0.58938,0.59777,0.60614,0.61446,0.96015,0.91664,0.92472,0.95083,0.92924,0.78123,0.45544,-0.033449,-0.60349,-1.1579,-1.6592,-2.1606,-2.752,-3.4606,-4.1958,-4.8,-5.1653,-5.3107,-5.3535,-5.4071,-5.5008,-5.5815,-5.5794,-5.4708,-5.2928,-5.114,-4.994,-2.9382,-2.8589,-2.778,-2.6956,-2.6117,-2.5263,-2.4394,-2.351,-2.2612,-2.17,-2.0774,-1.9834,-1.8882,-1.7916,-1.6939,-1.595,-1.495,-1.3939,-1.2918,-1.1887,-1.0848,-0.98014,-0.87472,-0.76864,-0.662,-0.55487,-0.44735,-0.33953,-0.23149,-0.12334,-0.015178,0.092898,0.20078,0.30836,0.41553,0.52218,0.6282,0.73346,0.83786,0.94128,1.0436,1.1447,1.2445,1.3428,1.4395,1.5345,1.6277,1.719,1.8083,1.8954,1.9802,2.0626,2.1426,2.22,2.2947,2.3666,2.4356,2.5017,2.5647,2.6246,2.6813,2.7348,2.7849,2.8316,2.8748,2.9146,2.9509,2.9835,3.0126,3.0381,3.06,3.0783,3.0929,3.1039,3.1114,3.1152,3.1155,3.1124,3.1057,3.0957,3.0823,3.0657,3.0459,3.0229,2.9969,2.968,2.9362,2.9017,2.8646,2.825,2.783,2.7387,2.6923,2.6439,2.5937,2.5417,2.4882,2.4332,2.3769,2.3195,2.2611,2.2018,2.1419,2.0814,2.0205,1.9594,1.8981,1.8369,1.7759,1.7151,1.6549,1.5952,1.5362,1.478,1.4208,1.3646,1.3096,1.2558,1.2034,1.1524,1.103,1.0551,1.0089,0.96445,0.92176,0.8809,0.8419,0.80479,0.76962,0.73639,0.70511,0.67579,0.64843,0.62301,0.59953,0.57797,0.55828,0.54045,0.52443,0.51018,0.49764,0.48677,0.4775,0.46977,0.46351,0.45867,0.45515,0.45289,0.45181,0.45183,0.45286,0.45483,0.45765,0.46124,0.46551,0.47039,0.47578,0.48161,0.48779,0.49426,0.50092,0.50772,0.51457,0.5214,0.52816,0.53477,0.54119,0.54735,0.5532,0.55869,0.56378,0.56843,0.57261,0.57627,0.57941,0.58198,0.58398,0.58539,0.58619,0.58638,0.58597,0.58494,0.58331,0.58108,0.57826,0.57488,0.57094,0.56647,0.56149,0.55603,0.55011,0.54377,0.53704,0.52995,0.52253,0.51483,0.50687,0.49869,0.49034,0.48185,0.47325,0.46459,0.4559,0.44721,0.43856,0.42999,0.42153,0.41321,0.40505,0.3971,0.38936,0.38188,0.37466,0.36774,0.36113,0.35484,0.34889,0.34329,0.33806,0.33319,0.3287,0.32458,0.32084,0.31748,0.31449,0.31187,0.30961,0.3077,0.30613,0.30488,0.30396,0.30333,0.30299,0.30291,0.30307,0.30347,0.30407,0.30485,0.3058,0.30689,0.3081,0.30941,0.3108,0.31224,0.31371,0.31519,0.31666,0.3181,0.31949,0.32081,0.32204,0.32317,0.32418,0.32505,0.32577,0.32633,0.32671,0.32691,0.32692,0.32673,0.32633,0.32572,0.32489,0.32385,0.32259,0.32111,0.31942,0.31751,0.3154,0.31308,0.31057,0.30787,0.30499,0.30194,0.29874,0.29538,0.2919,0.28829,0.28457,0.28077,0.27688,0.27293,0.26894,0.26492,0.26088,0.25685,0.25283,0.24886,0.24494,0.24109,0.23732,0.23367,0.23013,0.22673,0.22348,0.22039,0.21749,0.21479,0.21229,0.21002,0.20798,0.2062,0.20467,0.20341,0.20243,0.20174,0.20135,0.20126,0.20149,0.20204,0.20291,0.20412,0.20566,0.20754,0.20976,0.21232,0.21523,0.21848,0.22209,0.22604,0.23033,0.23497,0.23995,0.24527,0.25093,0.25692,0.26324,0.26988,0.27685,0.28413,0.29172,0.29961,0.3078,0.31628,0.32504,0.33409,0.3434])

    sig = hermite_recbeat(bm, la, co_sparse, b, tk_sparse)
    
    npt.assert_array_almost_equal(sig, expecting, 4)